2025-05-27 23:45:58,735 - INFO - sse:sse_client:55 - Connecting to SSE endpoint: http://localhost:8100/sse
2025-05-27 23:45:59,705 - INFO - _client:_send_single_request:1740 - HTTP Request: GET http://localhost:8100/sse "HTTP/1.1 200 OK"
2025-05-27 23:45:59,706 - INFO - sse:sse_reader:75 - Received endpoint URL: http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1
2025-05-27 23:45:59,706 - INFO - sse:sse_client:148 - Starting post writer with endpoint URL: http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1
2025-05-27 23:45:59,982 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:45:59,988 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:45:59,992 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:46:19,758 - WARNING - agent_loop3:_initialize_session:67 - ‚ö†Ô∏è WARNING: MemorySearch has been disabled from code!! Enable it to use memory.
2025-05-27 23:46:19,758 - INFO - agent_loop3:_run_initial_perception:72 - üìù Initial Perception
2025-05-27 23:46:19,758 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå Inital Perception input:
================================================================================
{
  "current_time": "2025-05-27T18:16:19.758264",
  "run_id": "ac74f624-3e78-4452-8654-b89e88d60fde-P",
  "snapshot_type": "user_query",
  "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
  "raw_input": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
  "memory_excerpt": null,
  "current_plan": {},
  "completed_steps": [
    {
      "index": "ROOT",
      "description": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": null,
      "from_step": null
    }
  ],
  "failed_steps": [],
  "globals_schema": {
    "memory": [
      "NoneType",
      "None"
    ]
  },
  "timestamp": "...",
  "schema_version": 1
}
================================================================================

2025-05-27 23:46:19,761 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Perception prompt:
================================================================================
  ############################################################
  #  Perception Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : High-Level Interpreter & Controller
  #  Output: ERORLL snapshot + Routing Decision + Summarization Directive
  #  Format: STRICT JSON only ‚Äì no markdown, no prose
  ############################################################
  You are the PERCEPTION module of an agentic reasoning system.
  Your job is to **observe**, **assess**, and **route**:
  - Understand the original user query or the result of an executed step
  - Decide if the goal is achieved (‚Üí route to Summarizer)
  - Or if planning is required (‚Üí route to Decision)
  - When routing to Summarizer, provide a clear summarization instruction
  You do not conclude. You do not plan.  
  You **control the loop** by issuing structured, routable status reports.
  ## ‚úÖ MODES
  ### Mode: `"user_query"`
  You are analyzing the original user query.
  Your tasks:
  - Identify key entities (named things, people, topics, values)
  - Describe the expected result type (number, list, explanation, etc.)
  - Check memory and globals to see if the query is already solvable
  - Decide:
    - If solvable now ‚Üí `route = "summarize"`
    - Else ‚Üí `route = "decision"`
  ### Mode: `"step_result"`
  You are analyzing the output of the most recently executed step.
  Your tasks:
  - Extract any useful entities or insights
  - Evaluate tool success/failure
  - Check if the result solves the query or helps progress
  - Decide:
    - If final goal is met or no more steps help ‚Üí `route = "summarize"`
    - Otherwise ‚Üí `route = "decision"`
  ## ‚úÖ INPUT FORMAT
  {
    "snapshot_type": "user_query" | "step_result",
    "original_query": "...",
    "raw_input": "...",             // user query or step output
    "memory_excerpt": [...],        // past solved graphs or summaries
    "globals_schema": { ... },      // currently available variables
    "current_plan": [...],          // nodes + steps if available
    "completed_steps": [...],       // history of successful nodes
    "failed_steps": [...]           // history of failed nodes/tools
  }
  ````
  ## ‚úÖ OUTPUT FORMAT (ERORLL + route + summarization instruction)
  {
    "entities": ["..."],
    "result_requirement": "...",
    "original_goal_achieved": true/false,
    "local_goal_achieved": true/false,
    "confidence": "0.84",
    "reasoning": "...",
    "local_reasoning": "...",
    "last_tooluse_summary": "...",
    "solution_summary": "...",
    "route": "summarize" | "decision",
    "instruction_to_summarize": "..."   // only when route = "summarize"
  }
  ## ‚úÖ INSTRUCTION TO SUMMARIZE ‚Äì Guidelines
  This field is only required when:
  "route": "summarize"
  It must:
  * Be descriptive.
  * Tell the Summarizer **exactly what to include**
  * Specify format, tone, or structure if needed
  * Format might be requested by the user, if not then fall back to markdown. 
  Examples:
  * `"Write a short user-facing summary of project price, name, and location in markdown format."`
  * `"Summarize the extracted chunks and highlight whether any contain dates or financial data. Return data in html format."`
  * `"Summarize the final tool results for the user in plain language"`
  ## ‚úÖ ROUTING LOGIC
  * Use `route = "summarize"` **only if**:
    * Goal is solved (`original_goal_achieved = true`), you have all the details, and the query/step cannot be solved by python code.
    * OR tools failed repeatedly and further steps are unhelpful
    * In both cases, you must provide `instruction_to_summarize`
    * Summarization task does not requise complex mathematical operations that actually need calculator/tools.
  * Use `route = "decision"` when:
    * More tool-based planning is possible or required. 
    * `instruction_to_summarize` must be omitted or `"Not applicable"`
  ## ‚úÖ EXAMPLES
  {
    "entities": ["DLF", "project price"],
    "result_requirement": "Price of DLF project in NCR",
    "original_goal_achieved": true,
    "local_goal_achieved": true,
    "confidence": "0.95",
    "reasoning": "Search result included name, price, and location.",
    "local_reasoning": "Tool output directly listed the required values.",
    "last_tooluse_summary": "webpage_url_to_llm_summary succeeded",
    "solution_summary": "Price: ‚Çπ2.65 Cr. Project: DLF Crest, Sector 54, Gurgaon.",
    "route": "summarize",
    "instruction_to_summarize": "Generate a concise user-facing summary of project name, price, and location. Avoid raw tool output. Markdown formatting"
  }
  {
    "entities": ["TCS", "stock price"],
    "result_requirement": "Live stock price and news summary",
    "original_goal_achieved": false,
    "local_goal_achieved": true,
    "confidence": "0.72",
    "reasoning": "Tool ran successfully, but the content was not structured or informative.",
    "local_reasoning": "HTML fetched, but lacked financial data.",
    "last_tooluse_summary": "webpage_url_to_raw_text succeeded but no price found",
    "solution_summary": "Not ready yet.",
    "route": "decision"
  }
  ## ‚úÖ FINAL NOTES
  * No markdown. No prose. Output strict JSON only.
  * Do not hallucinate tool success or failure.
  * Always refer to tool names in `last_tooluse_summary`.
  * Be deterministic and helpful.
  - You will be given `"globals_schema"` inside which you can find a lot of information regarding past run. 
    - If you think you have all information and we can summarize, then Information within `"globals_schema"` MUST be used to summarize in as fewer steps as possible.
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and call summarize.
  * Remember Decision can only write python code to call tools. IT DOES NOT HAVE SEMANTIC CAPABILITIES. So, you need to be careful when you route to `decision`. If YOU have all the information, then skip to `summarize` and provide all available information in `instruction_to_summarize` to summarize.
  * Remember Decision will try to use keyword search to extract information. That is BAD, and will not help extract sematics or detailed information. If you see that is what Decision planning to do in the next step, pivot to `summarize`.
  * DO NOT let Decision execute any code that is trying to summarize or extract. Route to Summarizer immediately. 
  * Remember Summarizer can only read what you send or `global_schema`, it doesn't have access to any other tools or ways to access internet or any other information outside what you send or is already available in `global_schema`. 
  You control the flow. Decide cleanly. Route responsibly. Solve in as fewer steps as possible.
  {
    "current_time": "2025-05-27T18:16:19.758264",
    "run_id": "ac74f624-3e78-4452-8654-b89e88d60fde-P",
    "snapshot_type": "user_query",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "raw_input": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "memory_excerpt": null,
    "current_plan": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": null,
        "from_step": null
      }
    ],
    "failed_steps": [],
    "globals_schema": {
      "memory": [
        "NoneType",
        "None"
      ]
    },
    "timestamp": "...",
    "schema_version": 1
  }
================================================================================

2025-05-27 23:46:21,764 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:46:25,065 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:46:25,072 - INFO - agent_loop3:_run_initial_perception:75 - üìù Initial Perception output
2025-05-27 23:46:25,072 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå Initial Perception output:
================================================================================
{
  "entities": [
    "form",
    "https://forms.gle/6Nc6QaaJyDvePxLv7"
  ],
  "result_requirement": "Form filled with assumed values, but not submitted",
  "original_goal_achieved": false,
  "local_goal_achieved": false,
  "confidence": "0.95",
  "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
  "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
  "last_tooluse_summary": "Not applicable",
  "solution_summary": "Not ready yet.",
  "route": "decision"
}
================================================================================

2025-05-27 23:46:25,081 - INFO - agent_loop3:run:49 - ‚öôÔ∏è Running decision loop...
2025-05-27 23:46:25,082 - INFO - agent_loop3:_run_decision_loop:97 - üìå Decision input
2025-05-27 23:46:25,082 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Decision input:
================================================================================
{
  "current_time": "2025-05-27T18:16:25.082162",
  "plan_mode": "initial",
  "planning_strategy": "exploratory",
  "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
  "perception": {
    "entities": [
      "form",
      "https://forms.gle/6Nc6QaaJyDvePxLv7"
    ],
    "result_requirement": "Form filled with assumed values, but not submitted",
    "original_goal_achieved": false,
    "local_goal_achieved": false,
    "confidence": "0.95",
    "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
    "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
    "last_tooluse_summary": "Not applicable",
    "solution_summary": "Not ready yet.",
    "route": "decision"
  },
  "plan_graph": {},
  "completed_steps": [
    {
      "index": "ROOT",
      "description": "initial query",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7"
        ],
        "result_requirement": "Form filled with assumed values, but not submitted",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.95",
        "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
        "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
        "last_tooluse_summary": "Not applicable",
        "solution_summary": "Not ready yet.",
        "route": "decision"
      },
      "from_step": null
    }
  ],
  "failed_steps": [
    {
      "index": "ROOT",
      "description": "initial query",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7"
        ],
        "result_requirement": "Form filled with assumed values, but not submitted",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.95",
        "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
        "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
        "last_tooluse_summary": "Not applicable",
        "solution_summary": "Not ready yet.",
        "route": "decision"
      },
      "from_step": null
    }
  ],
  "globals_schema": {
    "memory": {
      "type": "NoneType",
      "preview": "None"
    }
  }
}
================================================================================

2025-05-27 23:46:27,116 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Decision prompt:
================================================================================
  ############################################################
  #  Decision Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : Graph-based planner
  #  Output: plan_graph + next_step_id + 3 code variants as CODE_0A, CODE_0B, CODE_0C
  #  Format: STRICT JSON (no markdown, no prose)
  ############################################################
  You are the DECISION module of an agentic system.
  Your role is to PLAN ‚Äî not to execute, not to conclude.  
  You take structured input and emit:
  - A `plan_graph` with nodes and edges (representing step flow)
  - A `next_step_id` (e.g., "0", "1", etc.) for execution
  - Three alternate code variants for that step: `CODE_0A`, `CODE_0B`, `CODE_0C`
  Each variant solves the same problem in a different way (e.g., using different tools or chaining strategies).
  ## ‚úÖ MODES
  ### Mode: `"initial"`
  You are given:
  - `"original_query"` (string)
  - `"perception"` (structured object)
  - `"planning_strategy"` ("conservative" | "exploratory")
  - `"globals_schema"` (dict of existing global variables)
  You must return:
  {
    "plan_graph": {
      "nodes": [ { "id": "0", "description": "..." }, ... ],
      "edges": [ { "from": "ROOT", "to": "0", "type": "normal" }, ... ]
    },
    "next_step_id": "0",
    "code_variants": {
      "CODE_0A": "<code block>",
      "CODE_0B": "<code block>",
      "CODE_0C": "<code block>"
    }
  }
  ### Mode: `"mid_session"`
  You are given:
  * `"original_query"`
  * `"perception"` (latest)
  * `"planning_strategy"`
  * `"globals_schema"`
  * `"plan_graph"` (as emitted earlier)
  * `"completed_steps"` (list of step IDs)
  * `"failed_steps"` (list of step IDs)
  Your task:
  1. Evaluate the **most recent step‚Äôs feedback**:
     - If successful, continue to the next planned step
     - If not, revise the `plan_graph`:
       - Keep completed steps unchanged
       - You may **revise or replace the current step**
       - You may also **update PAST or FUTURE steps**
     - Only update `plan_graph` if the structure or meaning of the plan has changed. Minor wording or spelling edits alone should not result in a new plan version.
  You must return:
  1. The same or updated `plan_graph`
  2. A new `next_step_id` (the next or previous unresolved node to execute)
  3. Exactly three alternate `code_variants` for that step
  ## ‚úÖ RULES
  * Each `code_variants` dict must contain:
    * Keys: `"CODE_0A"`, `"CODE_0B"`, `"CODE_0C"` (always matching `next_step_id`)
    * Values: raw Python code blocks (no await, no def, no markdown)
  * Each code block must end with:
    `return { "var_name_0A": value }`
    or:
    `return { "text_0A": t, "summary_0A": s }`
  * All returned variables become part of `globals_schema`.
  * The names of all returned variables must end with `"_0A"`, `"_0B"`, `"_0C"` (always matching `next_step_id`)
  * You may reference these by name in future steps
  * Try and use different variables in `global_schema`, logical tools or strategies for different `code_variants`.
  * These `code_variants` and different variables in `global_schema` exits to create different ways for targeting the problem. Exploit it. 
  * üö´ Do NOT use `import` statements. You must only call tools provided in the list at the end of the prompt.
  * You are inside a sandboxed environment with no internet access and restricted built-ins.
  * If you need HTML parsing, text extraction, summarization, or any web-based processing, use the tools already defined ‚Äî do not reimplement.
  ## ‚úÖ EXAMPLE
  {
    "plan_graph": {
      "nodes": [
        { "id": "0", "description": "Get news URLs" },
        { "id": "1", "description": "Extract key data" },
        { "id": "2", "description": "Summarize results" }
      ],
      "edges": [
        { "from": "ROOT", "to": "0", "type": "normal" },
        { "from": "0", "to": "1", "type": "normal" },
        { "from": "1", "to": "2", "type": "normal" }
      ]
    },
    "next_step_id": "0",
    "code_variants": {
      "CODE_0A": "urls = web_search_urls('Tesla news')\nraw = webpage_url_to_raw_text(urls[0])\nreturn { \"raw\": raw }",
      "CODE_0B": "urls = web_search_urls('Tesla news site:reuters.com')\nsummary = webpage_url_to_summary({\n    \"url\": urls[0],\n    \"prompt\": \"Summarize this article focusing on Tesla's recent financial performance, strategic decisions, and any notable executive commentary.\"\n})\nreturn { \"summary\": summary }",
      "CODE_0C": "urls = web_search_urls('Tesla', 1)\nraw = webpage_url_to_raw_text(urls[0])\nsummary = webpage_url_to_summary({\n    \"url\": urls[0],\n    \"prompt\": \"Summarize this page with an emphasis on Tesla's current market position, new product announcements, and investor sentiment if mentioned.\"\n})\nreturn { \"raw\": raw, \"summary\": summary }"
    }
  }
  ## ‚ùó Variant Diversity Rules
  - Each `code_variants` block must contain **meaningfully different strategies**.
  - Avoid superficial changes like minor keyword tweaks in search queries.
  - Use different tools (e.g., raw text vs summary vs captioning), or different workflows (e.g., multi-step chaining).
  - At least one variant must contain a follow-up logic (e.g., parse, match, or filter).
  - Never return three identical or near-identical code variants.
  - All tool outputs are stored in `globals_schema`. Always retrieve variables from it using `globals_schema.get("key", default)` to avoid crashes.
  - Assume tool results like `web_search_urls(...)` return a **list**, not a string. Avoid unsafe indexing like `urls[0]`. Always check `if urls:` before accessing.
  - You can safely use:
  ```py
  urls = globals_schema.get("search_results_13", [])
  if urls:
    url = urls[0]
    ...
  - Tool outputs may be wrapped in structured formats like `[{ "type": "text", "text": ..., "annotations": ... }]`. Handle this format when chaining.
  - When using `"globals_schema"`, prefer `globals_schema.get("key", "")` or `globals_schema.get("key", {}).get("subkey", "")`
  - Avoid unsafe indexing like `globals_schema["key"]["subkey"]` unless guarded by `if "key" in globals_schema`. Study the variables in `global_schema` to understand how to use or call them in code.
  - Information within `"globals_schema"` MUST be used as much as possible. 
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and provide as much information as possible.
  ## ‚úÖ MEMORY AND CONTEXT
  * Use only values from `"globals_schema"` or new step outputs
  * Do not reuse step-local variables across steps
  * Variable reuse is only allowed if passed via `return`
  ## ‚úÖ FORMAT SUMMARY
  * Output must be **strict JSON**
  * Must include exactly: `plan_graph`, `next_step_id`, `code_variants`
  * `code_variants` must include `CODE_0A`, `CODE_0B`, `CODE_0C`
  * Never emit markdown, prose, or step metadata like `"type"`
  You are a planner. Your job is to produce a complete plan graph with executable step variants. Do not conclude, answer, or ask for clarification.
  ## ‚úÖ TOOL CONSTRAINTS
  - Use up to 3 tool calls per code block
  - No `await`, no `def`, no markdown, no keyword arguments
  - Always end with a structured `return { ... }`
  - Assume every tool returns a well-formed value, but its **internal type (e.g., list, dict)** must be verified before direct access.
  Use only the following tools (in positional form):
  ### The ONLY Available Tools
  - `add(integer, integer)  # Add two numbers.`
  - `subtract(integer, integer)  # Subtract one number from another.`
  - `multiply(string, string)  # Multiply two integers.`
  - `divide(integer, integer)  # Divide one number by another.`
  - `power(integer, integer)  # Compute a raised to the power of b.`
  - `cbrt(integer)  # Compute the cube root of a number.`
  - `factorial(integer)  # Compute the factorial of a number.`
  - `remainder(integer, integer)  # Compute the remainder of a divided by b.`
  - `sin(integer)  # Compute sine of an angle in radians.`
  - `cos(integer)  # Compute cosine of an angle in radians.`
  - `tan(integer)  # Compute tangent of an angle in radians.`
  - `mine(integer, integer)  # Special mining tool.`
  - `create_thumbnail(string)  # Create a 100x100 thumbnail from image.`
  - `strings_to_chars_to_int(string)  # Convert characters to ASCII values.`
  - `int_list_to_exponential_sum(array)  # Sum exponentials of int list.`
  - `fibonacci_numbers(integer)  # Generate first n Fibonacci numbers.`
  - `search_stored_documents_rag(string)  # Search old stored documents like PDF, DOCX, TXT, etc. to get relevant extracts.`
  - `convert_pdf_to_markdown(string)  # Convert PDF to markdown.`
  - `caption_images(string)  #`
  - `web_search_urls(string, integer)  # Search the web using multiple engines (DuckDuckGo, Bing, Ecosia, etc.) and return a list of relevant result URLs`
  - `webpage_url_to_raw_text(string)  # Extract readable text from a webpage`
  - `webpage_url_to_llm_summary(string, any)  # Summarize the webpage using a custom prompt if provided, otherwise fallback to default.`
  - `open_tab(string)  # Open a new browser tab with the specified URL`
  - `go_to_url(string)  # Navigate to URL in the current tab`
  - `go_back()  # Go back to the previous page`
  - `search_google(string)  # Search the query in Google in the current tab`
  - `click_element_by_index(integer)  # Click an element by its index in the current page`
  - `input_text(integer, string)  # Input text into an interactive element`
  - `send_keys(string)  # Send special keys like Escape, Backspace, Enter, or shortcuts like Control+C`
  - `scroll_down(integer)  # Scroll down the page by pixel amount - if none given, scroll one page`
  - `scroll_up(integer)  # Scroll up the page by pixel amount - if none given, scroll one page`
  - `scroll_to_text(string)  # Scroll to specific text on the page`
  - `switch_tab(integer)  # Switch to a specific tab`
  - `close_tab(integer)  # Close a specific tab`
  - `get_dropdown_options(integer)  # Get all options from a native dropdown element`
  - `select_dropdown_option(integer, string)  # Select dropdown option by text`
  - `drag_drop(integer, integer)  # Drag and drop elements or between coordinates - useful for canvas, sliders, file uploads`
  - `get_enhanced_page_structure()  # Get comprehensive page structure as JSON with all content AND interactive element IDs`
  - `get_comprehensive_markdown()  # Get comprehensive page markdown with all content AND interactive element IDs`
  - `save_pdf()  # Save PDF from current page by temporarily removing overlays`
  - `wait(integer)  # Wait for specified number of seconds (default 3)`
  - `done(boolean, string)  # Complete task - indicates if task is finished successfully or not`
  - `get_session_snapshot(boolean, boolean)  # Get current browser session snapshot with elements and optional screenshot saved as PNG file`
  - `take_screenshot(boolean, boolean)  # Take a screenshot of the current page and save as PNG file (returns file path, not base64)`
  - `get_interactive_elements(string, boolean, boolean)  # Get interactive elements with smart viewport and strict filtering`
  - `close_browser_session()  # Close the browser session`
  - `no_input()  # Doesn't take any input.`
  {
    "current_time": "2025-05-27T18:16:25.082162",
    "plan_mode": "initial",
    "planning_strategy": "exploratory",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "perception": {
      "entities": [
        "form",
        "https://forms.gle/6Nc6QaaJyDvePxLv7"
      ],
      "result_requirement": "Form filled with assumed values, but not submitted",
      "original_goal_achieved": false,
      "local_goal_achieved": false,
      "confidence": "0.95",
      "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
      "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
      "last_tooluse_summary": "Not applicable",
      "solution_summary": "Not ready yet.",
      "route": "decision"
    },
    "plan_graph": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      }
    ],
    "failed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      }
    ],
    "globals_schema": {
      "memory": {
        "type": "NoneType",
        "preview": "None"
      }
    }
  }
================================================================================

2025-05-27 23:46:27,117 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:46:31,599 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:46:31,609 - INFO - agent_loop3:_run_decision_loop:100 - üìå Decision output
2025-05-27 23:46:31,610 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Decision output:
================================================================================
{
  "plan_graph": {
    "nodes": [
      {
        "id": "0",
        "description": "Open the form URL in a browser tab."
      },
      {
        "id": "1",
        "description": "Get the interactive elements of the form."
      },
      {
        "id": "2",
        "description": "Fill out the form fields with dummy data. Use a loop to fill all found interactive elements",
        "condition": "Interactive elements found in step 1."
      },
      {
        "id": "3",
        "description": "Take a screenshot of the filled form.",
        "condition": "Form filling successful in step 2."
      }
    ],
    "edges": [
      {
        "from": "ROOT",
        "to": "0",
        "type": "normal"
      },
      {
        "from": "0",
        "to": "1",
        "type": "normal"
      },
      {
        "from": "1",
        "to": "2",
        "type": "normal"
      },
      {
        "from": "2",
        "to": "3",
        "type": "normal"
      }
    ]
  },
  "next_step_id": "0",
  "code_variants": {
    "CODE_0A": "url = 'https://forms.gle/6Nc6QaaJyDvePxLv7'\nopen_tab(url)\nreturn {}",
    "CODE_0B": "url = 'https://forms.gle/6Nc6QaaJyDvePxLv7'\nopen_tab(url)\nwait(3)\nreturn {}",
    "CODE_0C": "url = 'https://forms.gle/6Nc6QaaJyDvePxLv7'\nopen_tab(url)\nreturn {}"
  }
}
================================================================================

2025-05-27 23:46:31,620 - INFO - agent_loop3:_execute_steps_loop:123 - üîÅ Loop 1 ‚Äî Executing step 0
2025-05-27 23:46:31,626 - INFO - agent_loop3:_execute_steps_loop:134 - üîç Executing step 0
2025-05-27 23:46:31,627 - INFO - execute_step:execute_step_with_mode:56 - üîç Executing step 0 with mode fallback
2025-05-27 23:46:31,627 - INFO - execute_step:execute_step_with_mode:111 - üîÑ Executing 3 tasks in fallback mode
2025-05-27 23:46:31,627 - INFO - execute_step:execute_step_with_mode:124 - üîç Attempting variant CODE_0A
2025-05-27 23:46:31,627 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù Starting execution of step 0 (variant: CODE_0A)
================================================================================
üîß Code:
================================================================================
  url = 'https://forms.gle/6Nc6QaaJyDvePxLv7'
  open_tab(url)
  return {}
================================================================================

2025-05-27 23:46:31,627 - INFO - execute_step:execute_step:18 - üîç Executing code for step 0
2025-05-27 23:46:31,914 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:46:37,748 - ERROR - log_config:logger_code_block:125 - Failed to format code block: 'NoneType' object has no attribute 'split'
2025-05-27 23:46:37,748 - INFO - log_config:logger_code_block:126 - Execution snapshot for step 0: None
2025-05-27 23:46:37,749 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù Step 0 completed successfully
================================================================================
üîß Code:
================================================================================
  url = 'https://forms.gle/6Nc6QaaJyDvePxLv7'
  open_tab(url)
  return {}

================================================================================
üìä Output:
================================================================================
  {
    "execution_time": "2025-05-27 23:46:31",
    "raw": {},
    "result": {},
    "status": "success",
    "total_time": "6.122"
  }
================================================================================

2025-05-27 23:46:37,749 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù ‚úÖ Variant CODE_0A succeeded
================================================================================
üîß Code:
================================================================================
  url = 'https://forms.gle/6Nc6QaaJyDvePxLv7'
  open_tab(url)
  return {}

================================================================================
üìä Output:
================================================================================
  {
    "execution_time": "2025-05-27 23:46:31",
    "raw": {},
    "result": {},
    "status": "success",
    "total_time": "6.122"
  }
================================================================================

2025-05-27 23:46:37,751 - INFO - execute_step:execute_step_with_mode:131 - ‚úÖ Variant CODE_0A succeeded - returning result without processing other variants as its fallback mode
2025-05-27 23:46:37,751 - INFO - agent_loop3:_execute_steps_loop:163 - ‚úÖ Step 0 completed successfully.
2025-05-27 23:46:37,751 - INFO - agent_loop3:_execute_steps_loop:164 - üîç Running perception after execution
2025-05-27 23:46:37,754 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Perception prompt:
================================================================================
  ############################################################
  #  Perception Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : High-Level Interpreter & Controller
  #  Output: ERORLL snapshot + Routing Decision + Summarization Directive
  #  Format: STRICT JSON only ‚Äì no markdown, no prose
  ############################################################
  You are the PERCEPTION module of an agentic reasoning system.
  Your job is to **observe**, **assess**, and **route**:
  - Understand the original user query or the result of an executed step
  - Decide if the goal is achieved (‚Üí route to Summarizer)
  - Or if planning is required (‚Üí route to Decision)
  - When routing to Summarizer, provide a clear summarization instruction
  You do not conclude. You do not plan.  
  You **control the loop** by issuing structured, routable status reports.
  ## ‚úÖ MODES
  ### Mode: `"user_query"`
  You are analyzing the original user query.
  Your tasks:
  - Identify key entities (named things, people, topics, values)
  - Describe the expected result type (number, list, explanation, etc.)
  - Check memory and globals to see if the query is already solvable
  - Decide:
    - If solvable now ‚Üí `route = "summarize"`
    - Else ‚Üí `route = "decision"`
  ### Mode: `"step_result"`
  You are analyzing the output of the most recently executed step.
  Your tasks:
  - Extract any useful entities or insights
  - Evaluate tool success/failure
  - Check if the result solves the query or helps progress
  - Decide:
    - If final goal is met or no more steps help ‚Üí `route = "summarize"`
    - Otherwise ‚Üí `route = "decision"`
  ## ‚úÖ INPUT FORMAT
  {
    "snapshot_type": "user_query" | "step_result",
    "original_query": "...",
    "raw_input": "...",             // user query or step output
    "memory_excerpt": [...],        // past solved graphs or summaries
    "globals_schema": { ... },      // currently available variables
    "current_plan": [...],          // nodes + steps if available
    "completed_steps": [...],       // history of successful nodes
    "failed_steps": [...]           // history of failed nodes/tools
  }
  ````
  ## ‚úÖ OUTPUT FORMAT (ERORLL + route + summarization instruction)
  {
    "entities": ["..."],
    "result_requirement": "...",
    "original_goal_achieved": true/false,
    "local_goal_achieved": true/false,
    "confidence": "0.84",
    "reasoning": "...",
    "local_reasoning": "...",
    "last_tooluse_summary": "...",
    "solution_summary": "...",
    "route": "summarize" | "decision",
    "instruction_to_summarize": "..."   // only when route = "summarize"
  }
  ## ‚úÖ INSTRUCTION TO SUMMARIZE ‚Äì Guidelines
  This field is only required when:
  "route": "summarize"
  It must:
  * Be descriptive.
  * Tell the Summarizer **exactly what to include**
  * Specify format, tone, or structure if needed
  * Format might be requested by the user, if not then fall back to markdown. 
  Examples:
  * `"Write a short user-facing summary of project price, name, and location in markdown format."`
  * `"Summarize the extracted chunks and highlight whether any contain dates or financial data. Return data in html format."`
  * `"Summarize the final tool results for the user in plain language"`
  ## ‚úÖ ROUTING LOGIC
  * Use `route = "summarize"` **only if**:
    * Goal is solved (`original_goal_achieved = true`), you have all the details, and the query/step cannot be solved by python code.
    * OR tools failed repeatedly and further steps are unhelpful
    * In both cases, you must provide `instruction_to_summarize`
    * Summarization task does not requise complex mathematical operations that actually need calculator/tools.
  * Use `route = "decision"` when:
    * More tool-based planning is possible or required. 
    * `instruction_to_summarize` must be omitted or `"Not applicable"`
  ## ‚úÖ EXAMPLES
  {
    "entities": ["DLF", "project price"],
    "result_requirement": "Price of DLF project in NCR",
    "original_goal_achieved": true,
    "local_goal_achieved": true,
    "confidence": "0.95",
    "reasoning": "Search result included name, price, and location.",
    "local_reasoning": "Tool output directly listed the required values.",
    "last_tooluse_summary": "webpage_url_to_llm_summary succeeded",
    "solution_summary": "Price: ‚Çπ2.65 Cr. Project: DLF Crest, Sector 54, Gurgaon.",
    "route": "summarize",
    "instruction_to_summarize": "Generate a concise user-facing summary of project name, price, and location. Avoid raw tool output. Markdown formatting"
  }
  {
    "entities": ["TCS", "stock price"],
    "result_requirement": "Live stock price and news summary",
    "original_goal_achieved": false,
    "local_goal_achieved": true,
    "confidence": "0.72",
    "reasoning": "Tool ran successfully, but the content was not structured or informative.",
    "local_reasoning": "HTML fetched, but lacked financial data.",
    "last_tooluse_summary": "webpage_url_to_raw_text succeeded but no price found",
    "solution_summary": "Not ready yet.",
    "route": "decision"
  }
  ## ‚úÖ FINAL NOTES
  * No markdown. No prose. Output strict JSON only.
  * Do not hallucinate tool success or failure.
  * Always refer to tool names in `last_tooluse_summary`.
  * Be deterministic and helpful.
  - You will be given `"globals_schema"` inside which you can find a lot of information regarding past run. 
    - If you think you have all information and we can summarize, then Information within `"globals_schema"` MUST be used to summarize in as fewer steps as possible.
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and call summarize.
  * Remember Decision can only write python code to call tools. IT DOES NOT HAVE SEMANTIC CAPABILITIES. So, you need to be careful when you route to `decision`. If YOU have all the information, then skip to `summarize` and provide all available information in `instruction_to_summarize` to summarize.
  * Remember Decision will try to use keyword search to extract information. That is BAD, and will not help extract sematics or detailed information. If you see that is what Decision planning to do in the next step, pivot to `summarize`.
  * DO NOT let Decision execute any code that is trying to summarize or extract. Route to Summarizer immediately. 
  * Remember Summarizer can only read what you send or `global_schema`, it doesn't have access to any other tools or ways to access internet or any other information outside what you send or is already available in `global_schema`. 
  You control the flow. Decide cleanly. Route responsibly. Solve in as fewer steps as possible.
  {
    "current_time": "2025-05-27T18:16:37.751748",
    "run_id": "ac74f624-3e78-4452-8654-b89e88d60fde-P",
    "snapshot_type": "step_result",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "raw_input": "{'memory': None}",
    "memory_excerpt": null,
    "current_plan": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": null,
        "from_step": "ROOT"
      }
    ],
    "failed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      }
    ],
    "globals_schema": {
      "memory": [
        "NoneType",
        "None"
      ]
    },
    "timestamp": "...",
    "schema_version": 1
  }
================================================================================

2025-05-27 23:46:39,758 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:46:41,831 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:46:41,838 - INFO - agent_loop3:_execute_steps_loop:172 - üìå Perception output
2025-05-27 23:46:41,839 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Perception output (0)
================================================================================
{
  "entities": [
    "form",
    "https://forms.gle/6Nc6QaaJyDvePxLv7",
    "assumed values"
  ],
  "result_requirement": "Form filled with assumed values, without submitting",
  "original_goal_achieved": false,
  "local_goal_achieved": false,
  "confidence": "0.85",
  "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
  "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
  "last_tooluse_summary": "Browser tool opened the URL.",
  "solution_summary": "Form is open but not filled.",
  "route": "decision"
}
================================================================================

2025-05-27 23:46:41,864 - INFO - agent_loop3:_execute_steps_loop:190 - üîÅ Running Decision again
2025-05-27 23:46:41,864 - INFO - agent_loop3:_execute_steps_loop:193 - üìå Decision input
2025-05-27 23:46:41,865 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Decision input (1)
================================================================================
{
  "current_time": "2025-05-27T18:16:41.864992",
  "plan_mode": "initial",
  "planning_strategy": "exploratory",
  "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
  "perception": {
    "entities": [
      "form",
      "https://forms.gle/6Nc6QaaJyDvePxLv7",
      "assumed values"
    ],
    "result_requirement": "Form filled with assumed values, without submitting",
    "original_goal_achieved": false,
    "local_goal_achieved": false,
    "confidence": "0.85",
    "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
    "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
    "last_tooluse_summary": "Browser tool opened the URL.",
    "solution_summary": "Form is open but not filled.",
    "route": "decision"
  },
  "plan_graph": {},
  "completed_steps": [
    {
      "index": "ROOT",
      "description": "initial query",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7"
        ],
        "result_requirement": "Form filled with assumed values, but not submitted",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.95",
        "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
        "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
        "last_tooluse_summary": "Not applicable",
        "solution_summary": "Not ready yet.",
        "route": "decision"
      },
      "from_step": null
    },
    {
      "index": "0",
      "description": "Open the form URL in a browser tab.",
      "type": "CODE",
      "status": "completed",
      "result": {},
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7",
          "assumed values"
        ],
        "result_requirement": "Form filled with assumed values, without submitting",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.85",
        "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
        "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
        "last_tooluse_summary": "Browser tool opened the URL.",
        "solution_summary": "Form is open but not filled.",
        "route": "decision"
      },
      "from_step": "ROOT"
    }
  ],
  "failed_steps": [
    {
      "index": "ROOT",
      "description": "initial query",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7"
        ],
        "result_requirement": "Form filled with assumed values, but not submitted",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.95",
        "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
        "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
        "last_tooluse_summary": "Not applicable",
        "solution_summary": "Not ready yet.",
        "route": "decision"
      },
      "from_step": null
    },
    {
      "index": "0",
      "description": "Open the form URL in a browser tab.",
      "type": "CODE",
      "status": "completed",
      "result": {},
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7",
          "assumed values"
        ],
        "result_requirement": "Form filled with assumed values, without submitting",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.85",
        "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
        "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
        "last_tooluse_summary": "Browser tool opened the URL.",
        "solution_summary": "Form is open but not filled.",
        "route": "decision"
      },
      "from_step": "ROOT"
    }
  ],
  "globals_schema": {
    "memory": {
      "type": "NoneType",
      "preview": "None"
    }
  }
}
================================================================================

2025-05-27 23:46:43,876 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Decision prompt:
================================================================================
  ############################################################
  #  Decision Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : Graph-based planner
  #  Output: plan_graph + next_step_id + 3 code variants as CODE_0A, CODE_0B, CODE_0C
  #  Format: STRICT JSON (no markdown, no prose)
  ############################################################
  You are the DECISION module of an agentic system.
  Your role is to PLAN ‚Äî not to execute, not to conclude.  
  You take structured input and emit:
  - A `plan_graph` with nodes and edges (representing step flow)
  - A `next_step_id` (e.g., "0", "1", etc.) for execution
  - Three alternate code variants for that step: `CODE_0A`, `CODE_0B`, `CODE_0C`
  Each variant solves the same problem in a different way (e.g., using different tools or chaining strategies).
  ## ‚úÖ MODES
  ### Mode: `"initial"`
  You are given:
  - `"original_query"` (string)
  - `"perception"` (structured object)
  - `"planning_strategy"` ("conservative" | "exploratory")
  - `"globals_schema"` (dict of existing global variables)
  You must return:
  {
    "plan_graph": {
      "nodes": [ { "id": "0", "description": "..." }, ... ],
      "edges": [ { "from": "ROOT", "to": "0", "type": "normal" }, ... ]
    },
    "next_step_id": "0",
    "code_variants": {
      "CODE_0A": "<code block>",
      "CODE_0B": "<code block>",
      "CODE_0C": "<code block>"
    }
  }
  ### Mode: `"mid_session"`
  You are given:
  * `"original_query"`
  * `"perception"` (latest)
  * `"planning_strategy"`
  * `"globals_schema"`
  * `"plan_graph"` (as emitted earlier)
  * `"completed_steps"` (list of step IDs)
  * `"failed_steps"` (list of step IDs)
  Your task:
  1. Evaluate the **most recent step‚Äôs feedback**:
     - If successful, continue to the next planned step
     - If not, revise the `plan_graph`:
       - Keep completed steps unchanged
       - You may **revise or replace the current step**
       - You may also **update PAST or FUTURE steps**
     - Only update `plan_graph` if the structure or meaning of the plan has changed. Minor wording or spelling edits alone should not result in a new plan version.
  You must return:
  1. The same or updated `plan_graph`
  2. A new `next_step_id` (the next or previous unresolved node to execute)
  3. Exactly three alternate `code_variants` for that step
  ## ‚úÖ RULES
  * Each `code_variants` dict must contain:
    * Keys: `"CODE_0A"`, `"CODE_0B"`, `"CODE_0C"` (always matching `next_step_id`)
    * Values: raw Python code blocks (no await, no def, no markdown)
  * Each code block must end with:
    `return { "var_name_0A": value }`
    or:
    `return { "text_0A": t, "summary_0A": s }`
  * All returned variables become part of `globals_schema`.
  * The names of all returned variables must end with `"_0A"`, `"_0B"`, `"_0C"` (always matching `next_step_id`)
  * You may reference these by name in future steps
  * Try and use different variables in `global_schema`, logical tools or strategies for different `code_variants`.
  * These `code_variants` and different variables in `global_schema` exits to create different ways for targeting the problem. Exploit it. 
  * üö´ Do NOT use `import` statements. You must only call tools provided in the list at the end of the prompt.
  * You are inside a sandboxed environment with no internet access and restricted built-ins.
  * If you need HTML parsing, text extraction, summarization, or any web-based processing, use the tools already defined ‚Äî do not reimplement.
  ## ‚úÖ EXAMPLE
  {
    "plan_graph": {
      "nodes": [
        { "id": "0", "description": "Get news URLs" },
        { "id": "1", "description": "Extract key data" },
        { "id": "2", "description": "Summarize results" }
      ],
      "edges": [
        { "from": "ROOT", "to": "0", "type": "normal" },
        { "from": "0", "to": "1", "type": "normal" },
        { "from": "1", "to": "2", "type": "normal" }
      ]
    },
    "next_step_id": "0",
    "code_variants": {
      "CODE_0A": "urls = web_search_urls('Tesla news')\nraw = webpage_url_to_raw_text(urls[0])\nreturn { \"raw\": raw }",
      "CODE_0B": "urls = web_search_urls('Tesla news site:reuters.com')\nsummary = webpage_url_to_summary({\n    \"url\": urls[0],\n    \"prompt\": \"Summarize this article focusing on Tesla's recent financial performance, strategic decisions, and any notable executive commentary.\"\n})\nreturn { \"summary\": summary }",
      "CODE_0C": "urls = web_search_urls('Tesla', 1)\nraw = webpage_url_to_raw_text(urls[0])\nsummary = webpage_url_to_summary({\n    \"url\": urls[0],\n    \"prompt\": \"Summarize this page with an emphasis on Tesla's current market position, new product announcements, and investor sentiment if mentioned.\"\n})\nreturn { \"raw\": raw, \"summary\": summary }"
    }
  }
  ## ‚ùó Variant Diversity Rules
  - Each `code_variants` block must contain **meaningfully different strategies**.
  - Avoid superficial changes like minor keyword tweaks in search queries.
  - Use different tools (e.g., raw text vs summary vs captioning), or different workflows (e.g., multi-step chaining).
  - At least one variant must contain a follow-up logic (e.g., parse, match, or filter).
  - Never return three identical or near-identical code variants.
  - All tool outputs are stored in `globals_schema`. Always retrieve variables from it using `globals_schema.get("key", default)` to avoid crashes.
  - Assume tool results like `web_search_urls(...)` return a **list**, not a string. Avoid unsafe indexing like `urls[0]`. Always check `if urls:` before accessing.
  - You can safely use:
  ```py
  urls = globals_schema.get("search_results_13", [])
  if urls:
    url = urls[0]
    ...
  - Tool outputs may be wrapped in structured formats like `[{ "type": "text", "text": ..., "annotations": ... }]`. Handle this format when chaining.
  - When using `"globals_schema"`, prefer `globals_schema.get("key", "")` or `globals_schema.get("key", {}).get("subkey", "")`
  - Avoid unsafe indexing like `globals_schema["key"]["subkey"]` unless guarded by `if "key" in globals_schema`. Study the variables in `global_schema` to understand how to use or call them in code.
  - Information within `"globals_schema"` MUST be used as much as possible. 
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and provide as much information as possible.
  ## ‚úÖ MEMORY AND CONTEXT
  * Use only values from `"globals_schema"` or new step outputs
  * Do not reuse step-local variables across steps
  * Variable reuse is only allowed if passed via `return`
  ## ‚úÖ FORMAT SUMMARY
  * Output must be **strict JSON**
  * Must include exactly: `plan_graph`, `next_step_id`, `code_variants`
  * `code_variants` must include `CODE_0A`, `CODE_0B`, `CODE_0C`
  * Never emit markdown, prose, or step metadata like `"type"`
  You are a planner. Your job is to produce a complete plan graph with executable step variants. Do not conclude, answer, or ask for clarification.
  ## ‚úÖ TOOL CONSTRAINTS
  - Use up to 3 tool calls per code block
  - No `await`, no `def`, no markdown, no keyword arguments
  - Always end with a structured `return { ... }`
  - Assume every tool returns a well-formed value, but its **internal type (e.g., list, dict)** must be verified before direct access.
  Use only the following tools (in positional form):
  ### The ONLY Available Tools
  - `add(integer, integer)  # Add two numbers.`
  - `subtract(integer, integer)  # Subtract one number from another.`
  - `multiply(string, string)  # Multiply two integers.`
  - `divide(integer, integer)  # Divide one number by another.`
  - `power(integer, integer)  # Compute a raised to the power of b.`
  - `cbrt(integer)  # Compute the cube root of a number.`
  - `factorial(integer)  # Compute the factorial of a number.`
  - `remainder(integer, integer)  # Compute the remainder of a divided by b.`
  - `sin(integer)  # Compute sine of an angle in radians.`
  - `cos(integer)  # Compute cosine of an angle in radians.`
  - `tan(integer)  # Compute tangent of an angle in radians.`
  - `mine(integer, integer)  # Special mining tool.`
  - `create_thumbnail(string)  # Create a 100x100 thumbnail from image.`
  - `strings_to_chars_to_int(string)  # Convert characters to ASCII values.`
  - `int_list_to_exponential_sum(array)  # Sum exponentials of int list.`
  - `fibonacci_numbers(integer)  # Generate first n Fibonacci numbers.`
  - `search_stored_documents_rag(string)  # Search old stored documents like PDF, DOCX, TXT, etc. to get relevant extracts.`
  - `convert_pdf_to_markdown(string)  # Convert PDF to markdown.`
  - `caption_images(string)  #`
  - `web_search_urls(string, integer)  # Search the web using multiple engines (DuckDuckGo, Bing, Ecosia, etc.) and return a list of relevant result URLs`
  - `webpage_url_to_raw_text(string)  # Extract readable text from a webpage`
  - `webpage_url_to_llm_summary(string, any)  # Summarize the webpage using a custom prompt if provided, otherwise fallback to default.`
  - `open_tab(string)  # Open a new browser tab with the specified URL`
  - `go_to_url(string)  # Navigate to URL in the current tab`
  - `go_back()  # Go back to the previous page`
  - `search_google(string)  # Search the query in Google in the current tab`
  - `click_element_by_index(integer)  # Click an element by its index in the current page`
  - `input_text(integer, string)  # Input text into an interactive element`
  - `send_keys(string)  # Send special keys like Escape, Backspace, Enter, or shortcuts like Control+C`
  - `scroll_down(integer)  # Scroll down the page by pixel amount - if none given, scroll one page`
  - `scroll_up(integer)  # Scroll up the page by pixel amount - if none given, scroll one page`
  - `scroll_to_text(string)  # Scroll to specific text on the page`
  - `switch_tab(integer)  # Switch to a specific tab`
  - `close_tab(integer)  # Close a specific tab`
  - `get_dropdown_options(integer)  # Get all options from a native dropdown element`
  - `select_dropdown_option(integer, string)  # Select dropdown option by text`
  - `drag_drop(integer, integer)  # Drag and drop elements or between coordinates - useful for canvas, sliders, file uploads`
  - `get_enhanced_page_structure()  # Get comprehensive page structure as JSON with all content AND interactive element IDs`
  - `get_comprehensive_markdown()  # Get comprehensive page markdown with all content AND interactive element IDs`
  - `save_pdf()  # Save PDF from current page by temporarily removing overlays`
  - `wait(integer)  # Wait for specified number of seconds (default 3)`
  - `done(boolean, string)  # Complete task - indicates if task is finished successfully or not`
  - `get_session_snapshot(boolean, boolean)  # Get current browser session snapshot with elements and optional screenshot saved as PNG file`
  - `take_screenshot(boolean, boolean)  # Take a screenshot of the current page and save as PNG file (returns file path, not base64)`
  - `get_interactive_elements(string, boolean, boolean)  # Get interactive elements with smart viewport and strict filtering`
  - `close_browser_session()  # Close the browser session`
  - `no_input()  # Doesn't take any input.`
  {
    "current_time": "2025-05-27T18:16:41.864992",
    "plan_mode": "initial",
    "planning_strategy": "exploratory",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "perception": {
      "entities": [
        "form",
        "https://forms.gle/6Nc6QaaJyDvePxLv7",
        "assumed values"
      ],
      "result_requirement": "Form filled with assumed values, without submitting",
      "original_goal_achieved": false,
      "local_goal_achieved": false,
      "confidence": "0.85",
      "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
      "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
      "last_tooluse_summary": "Browser tool opened the URL.",
      "solution_summary": "Form is open but not filled.",
      "route": "decision"
    },
    "plan_graph": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      }
    ],
    "failed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      }
    ],
    "globals_schema": {
      "memory": {
        "type": "NoneType",
        "preview": "None"
      }
    }
  }
================================================================================

2025-05-27 23:46:43,877 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:46:47,797 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:46:47,803 - INFO - agent_loop3:_execute_steps_loop:198 - üìå Decision output
2025-05-27 23:46:47,804 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Decision output (1)
================================================================================
{
  "plan_graph": {
    "nodes": [
      {
        "id": "0",
        "description": "Open the form URL in a browser tab."
      },
      {
        "id": "1",
        "description": "Get interactive elements of the form."
      },
      {
        "id": "2",
        "description": "Fill the form fields with assumed values."
      }
    ],
    "edges": [
      {
        "from": "ROOT",
        "to": "0",
        "type": "normal"
      },
      {
        "from": "0",
        "to": "1",
        "type": "normal"
      },
      {
        "from": "1",
        "to": "2",
        "type": "normal"
      }
    ]
  },
  "next_step_id": "1",
  "code_variants": {
    "CODE_1A": "interactive_elements_1A = get_interactive_elements(\"form\", True, True)\nreturn {\"interactive_elements_1A\": interactive_elements_1A}",
    "CODE_1B": "comprehensive_markdown_1B = get_comprehensive_markdown()\nreturn {\"comprehensive_markdown_1B\": comprehensive_markdown_1B}",
    "CODE_1C": "enhanced_page_structure_1C = get_enhanced_page_structure()\nreturn {\"enhanced_page_structure_1C\": enhanced_page_structure_1C}"
  }
}
================================================================================

2025-05-27 23:46:47,809 - INFO - agent_loop3:_execute_steps_loop:123 - üîÅ Loop 2 ‚Äî Executing step 1
2025-05-27 23:46:47,813 - INFO - agent_loop3:_execute_steps_loop:134 - üîç Executing step 1
2025-05-27 23:46:47,814 - INFO - execute_step:execute_step_with_mode:56 - üîç Executing step 1 with mode fallback
2025-05-27 23:46:47,814 - INFO - execute_step:execute_step_with_mode:111 - üîÑ Executing 3 tasks in fallback mode
2025-05-27 23:46:47,814 - INFO - execute_step:execute_step_with_mode:124 - üîç Attempting variant CODE_1A
2025-05-27 23:46:47,814 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù Starting execution of step 1 (variant: CODE_1A)
================================================================================
üîß Code:
================================================================================
  interactive_elements_1A = get_interactive_elements("form", True, True)
  return {"interactive_elements_1A": interactive_elements_1A}
================================================================================

2025-05-27 23:46:47,816 - INFO - execute_step:execute_step:18 - üîç Executing code for step 1
2025-05-27 23:46:48,118 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:46:49,231 - ERROR - log_config:logger_code_block:125 - Failed to format code block: 'NoneType' object has no attribute 'split'
2025-05-27 23:46:49,231 - INFO - log_config:logger_code_block:126 - Execution snapshot for step 1: None
2025-05-27 23:46:49,232 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù Step 1 completed successfully
================================================================================
üîß Code:
================================================================================
  interactive_elements_1A = get_interactive_elements("form", True, True)
  return {"interactive_elements_1A": interactive_elements_1A}

================================================================================
üìä Output:
================================================================================
  {
    "execution_time": "2025-05-27 23:46:47",
    "raw": {
      "interactive_elements_1A": {
        "buttons": [
          {
            "action": "click_element_by_index",
            "desc": "Submit",
            "id": 7
          },
          {
            "action": "click_element_by_index",
            "desc": "Clear form",
            "id": 9
          }
        ],
        "forms": [
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 2
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 3
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 4
          },
          {
            "action": "input_text",
            "desc": "Date Input",
            "id": 5
          }
        ],
        "nav": [
          {
            "action": "click_element_by_index",
            "desc": "Report",
            "id": 10
          },
          {
            "action": "click_element_by_index",
            "desc": "Forms",
            "id": 11
          }
        ],
        "success": true,
        "total": 8
      }
    },
    "result": {
      "interactive_elements_1A": {
        "buttons": [
          {
            "action": "click_element_by_index",
            "desc": "Submit",
            "id": 7
          },
          {
            "action": "click_element_by_index",
            "desc": "Clear form",
            "id": 9
          }
        ],
        "forms": [
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 2
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 3
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 4
          },
          {
            "action": "input_text",
            "desc": "Date Input",
            "id": 5
          }
        ],
        "nav": [
          {
            "action": "click_element_by_index",
            "desc": "Report",
            "id": 10
          },
          {
            "action": "click_element_by_index",
            "desc": "Forms",
            "id": 11
          }
        ],
        "success": true,
        "total": 8
      }
    },
    "status": "success",
    "total_time": "1.415"
  }
================================================================================

2025-05-27 23:46:49,232 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù ‚úÖ Variant CODE_1A succeeded
================================================================================
üîß Code:
================================================================================
  interactive_elements_1A = get_interactive_elements("form", True, True)
  return {"interactive_elements_1A": interactive_elements_1A}

================================================================================
üìä Output:
================================================================================
  {
    "execution_time": "2025-05-27 23:46:47",
    "raw": {
      "interactive_elements_1A": {
        "buttons": [
          {
            "action": "click_element_by_index",
            "desc": "Submit",
            "id": 7
          },
          {
            "action": "click_element_by_index",
            "desc": "Clear form",
            "id": 9
          }
        ],
        "forms": [
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 2
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 3
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 4
          },
          {
            "action": "input_text",
            "desc": "Date Input",
            "id": 5
          }
        ],
        "nav": [
          {
            "action": "click_element_by_index",
            "desc": "Report",
            "id": 10
          },
          {
            "action": "click_element_by_index",
            "desc": "Forms",
            "id": 11
          }
        ],
        "success": true,
        "total": 8
      }
    },
    "result": {
      "interactive_elements_1A": {
        "buttons": [
          {
            "action": "click_element_by_index",
            "desc": "Submit",
            "id": 7
          },
          {
            "action": "click_element_by_index",
            "desc": "Clear form",
            "id": 9
          }
        ],
        "forms": [
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 2
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 3
          },
          {
            "action": "input_text",
            "desc": "Text Input",
            "id": 4
          },
          {
            "action": "input_text",
            "desc": "Date Input",
            "id": 5
          }
        ],
        "nav": [
          {
            "action": "click_element_by_index",
            "desc": "Report",
            "id": 10
          },
          {
            "action": "click_element_by_index",
            "desc": "Forms",
            "id": 11
          }
        ],
        "success": true,
        "total": 8
      }
    },
    "status": "success",
    "total_time": "1.415"
  }
================================================================================

2025-05-27 23:46:49,234 - INFO - execute_step:execute_step_with_mode:131 - ‚úÖ Variant CODE_1A succeeded - returning result without processing other variants as its fallback mode
2025-05-27 23:46:49,234 - INFO - agent_loop3:_execute_steps_loop:163 - ‚úÖ Step 1 completed successfully.
2025-05-27 23:46:49,234 - INFO - agent_loop3:_execute_steps_loop:164 - üîç Running perception after execution
2025-05-27 23:46:49,237 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Perception prompt:
================================================================================
  ############################################################
  #  Perception Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : High-Level Interpreter & Controller
  #  Output: ERORLL snapshot + Routing Decision + Summarization Directive
  #  Format: STRICT JSON only ‚Äì no markdown, no prose
  ############################################################
  You are the PERCEPTION module of an agentic reasoning system.
  Your job is to **observe**, **assess**, and **route**:
  - Understand the original user query or the result of an executed step
  - Decide if the goal is achieved (‚Üí route to Summarizer)
  - Or if planning is required (‚Üí route to Decision)
  - When routing to Summarizer, provide a clear summarization instruction
  You do not conclude. You do not plan.  
  You **control the loop** by issuing structured, routable status reports.
  ## ‚úÖ MODES
  ### Mode: `"user_query"`
  You are analyzing the original user query.
  Your tasks:
  - Identify key entities (named things, people, topics, values)
  - Describe the expected result type (number, list, explanation, etc.)
  - Check memory and globals to see if the query is already solvable
  - Decide:
    - If solvable now ‚Üí `route = "summarize"`
    - Else ‚Üí `route = "decision"`
  ### Mode: `"step_result"`
  You are analyzing the output of the most recently executed step.
  Your tasks:
  - Extract any useful entities or insights
  - Evaluate tool success/failure
  - Check if the result solves the query or helps progress
  - Decide:
    - If final goal is met or no more steps help ‚Üí `route = "summarize"`
    - Otherwise ‚Üí `route = "decision"`
  ## ‚úÖ INPUT FORMAT
  {
    "snapshot_type": "user_query" | "step_result",
    "original_query": "...",
    "raw_input": "...",             // user query or step output
    "memory_excerpt": [...],        // past solved graphs or summaries
    "globals_schema": { ... },      // currently available variables
    "current_plan": [...],          // nodes + steps if available
    "completed_steps": [...],       // history of successful nodes
    "failed_steps": [...]           // history of failed nodes/tools
  }
  ````
  ## ‚úÖ OUTPUT FORMAT (ERORLL + route + summarization instruction)
  {
    "entities": ["..."],
    "result_requirement": "...",
    "original_goal_achieved": true/false,
    "local_goal_achieved": true/false,
    "confidence": "0.84",
    "reasoning": "...",
    "local_reasoning": "...",
    "last_tooluse_summary": "...",
    "solution_summary": "...",
    "route": "summarize" | "decision",
    "instruction_to_summarize": "..."   // only when route = "summarize"
  }
  ## ‚úÖ INSTRUCTION TO SUMMARIZE ‚Äì Guidelines
  This field is only required when:
  "route": "summarize"
  It must:
  * Be descriptive.
  * Tell the Summarizer **exactly what to include**
  * Specify format, tone, or structure if needed
  * Format might be requested by the user, if not then fall back to markdown. 
  Examples:
  * `"Write a short user-facing summary of project price, name, and location in markdown format."`
  * `"Summarize the extracted chunks and highlight whether any contain dates or financial data. Return data in html format."`
  * `"Summarize the final tool results for the user in plain language"`
  ## ‚úÖ ROUTING LOGIC
  * Use `route = "summarize"` **only if**:
    * Goal is solved (`original_goal_achieved = true`), you have all the details, and the query/step cannot be solved by python code.
    * OR tools failed repeatedly and further steps are unhelpful
    * In both cases, you must provide `instruction_to_summarize`
    * Summarization task does not requise complex mathematical operations that actually need calculator/tools.
  * Use `route = "decision"` when:
    * More tool-based planning is possible or required. 
    * `instruction_to_summarize` must be omitted or `"Not applicable"`
  ## ‚úÖ EXAMPLES
  {
    "entities": ["DLF", "project price"],
    "result_requirement": "Price of DLF project in NCR",
    "original_goal_achieved": true,
    "local_goal_achieved": true,
    "confidence": "0.95",
    "reasoning": "Search result included name, price, and location.",
    "local_reasoning": "Tool output directly listed the required values.",
    "last_tooluse_summary": "webpage_url_to_llm_summary succeeded",
    "solution_summary": "Price: ‚Çπ2.65 Cr. Project: DLF Crest, Sector 54, Gurgaon.",
    "route": "summarize",
    "instruction_to_summarize": "Generate a concise user-facing summary of project name, price, and location. Avoid raw tool output. Markdown formatting"
  }
  {
    "entities": ["TCS", "stock price"],
    "result_requirement": "Live stock price and news summary",
    "original_goal_achieved": false,
    "local_goal_achieved": true,
    "confidence": "0.72",
    "reasoning": "Tool ran successfully, but the content was not structured or informative.",
    "local_reasoning": "HTML fetched, but lacked financial data.",
    "last_tooluse_summary": "webpage_url_to_raw_text succeeded but no price found",
    "solution_summary": "Not ready yet.",
    "route": "decision"
  }
  ## ‚úÖ FINAL NOTES
  * No markdown. No prose. Output strict JSON only.
  * Do not hallucinate tool success or failure.
  * Always refer to tool names in `last_tooluse_summary`.
  * Be deterministic and helpful.
  - You will be given `"globals_schema"` inside which you can find a lot of information regarding past run. 
    - If you think you have all information and we can summarize, then Information within `"globals_schema"` MUST be used to summarize in as fewer steps as possible.
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and call summarize.
  * Remember Decision can only write python code to call tools. IT DOES NOT HAVE SEMANTIC CAPABILITIES. So, you need to be careful when you route to `decision`. If YOU have all the information, then skip to `summarize` and provide all available information in `instruction_to_summarize` to summarize.
  * Remember Decision will try to use keyword search to extract information. That is BAD, and will not help extract sematics or detailed information. If you see that is what Decision planning to do in the next step, pivot to `summarize`.
  * DO NOT let Decision execute any code that is trying to summarize or extract. Route to Summarizer immediately. 
  * Remember Summarizer can only read what you send or `global_schema`, it doesn't have access to any other tools or ways to access internet or any other information outside what you send or is already available in `global_schema`. 
  You control the flow. Decide cleanly. Route responsibly. Solve in as fewer steps as possible.
  {
    "current_time": "2025-05-27T18:16:49.234153",
    "run_id": "ac74f624-3e78-4452-8654-b89e88d60fde-P",
    "snapshot_type": "step_result",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "raw_input": "{'memory': None, 'interactive_elements_1A': {'success': True, 'nav': [{'id': 10, 'desc': 'Report', 'action': 'click_element_by_index'}, {'id': 11, 'desc': 'Forms', 'action': 'click_element_by_index'}], 'forms': [{'id': 2, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 3, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 4, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 5, 'desc': 'Date Input', 'action': 'input_text'}], 'buttons': [{'id': 7, 'desc': 'Submit', 'action': 'click_element_by_index'}, {'id': 9, 'desc': 'Clear form', 'action': 'click_element_by_index'}], 'total': 8}}",
    "memory_excerpt": null,
    "current_plan": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      },
      {
        "index": "1",
        "description": "Get interactive elements of the form.",
        "type": "CODE",
        "status": "completed",
        "result": {
          "interactive_elements_1A": {
            "success": true,
            "nav": [
              {
                "id": 10,
                "desc": "Report",
                "action": "click_element_by_index"
              },
              {
                "id": 11,
                "desc": "Forms",
                "action": "click_element_by_index"
              }
            ],
            "forms": [
              {
                "id": 2,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 3,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 4,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 5,
                "desc": "Date Input",
                "action": "input_text"
              }
            ],
            "buttons": [
              {
                "id": 7,
                "desc": "Submit",
                "action": "click_element_by_index"
              },
              {
                "id": 9,
                "desc": "Clear form",
                "action": "click_element_by_index"
              }
            ],
            "total": 8
          }
        },
        "conclusion": null,
        "error": null,
        "perception": null,
        "from_step": "1"
      }
    ],
    "failed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      }
    ],
    "globals_schema": {
      "memory": [
        "NoneType",
        "None"
      ],
      "interactive_elements_1A": [
        "dict",
        "{'success': True, 'nav': [{'id': 10, 'desc': 'Report', 'action': 'click_element_by_index'}, {'id': 11, 'desc': 'Forms', "
      ]
    },
    "timestamp": "...",
    "schema_version": 1
  }
================================================================================

2025-05-27 23:46:51,240 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:46:54,964 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:46:54,969 - INFO - agent_loop3:_execute_steps_loop:172 - üìå Perception output
2025-05-27 23:46:54,970 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Perception output (1)
================================================================================
{
  "entities": [
    "form",
    "https://forms.gle/6Nc6QaaJyDvePxLv7",
    "assumed values",
    "text input",
    "date input",
    "submit button",
    "clear form button"
  ],
  "result_requirement": "Form filled with assumed values, without submitting",
  "original_goal_achieved": false,
  "local_goal_achieved": true,
  "confidence": "0.90",
  "reasoning": "The tool successfully extracted the interactive elements of the form, including text input fields, a date input field, a submit button, and a clear form button. The next step is to fill these fields with assumed values. We can use `globals_schema` to continue with the available information.",
  "local_reasoning": "The current step successfully identified form elements. The next step is to fill these elements with assumed values.",
  "last_tooluse_summary": "interactive_elements_1A successfully extracted form elements.",
  "solution_summary": "Form elements identified; ready for data input.",
  "route": "decision"
}
================================================================================

2025-05-27 23:46:54,987 - INFO - agent_loop3:_execute_steps_loop:190 - üîÅ Running Decision again
2025-05-27 23:46:54,987 - INFO - agent_loop3:_execute_steps_loop:193 - üìå Decision input
2025-05-27 23:46:54,989 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Decision input (2)
================================================================================
{
  "current_time": "2025-05-27T18:16:54.987282",
  "plan_mode": "initial",
  "planning_strategy": "exploratory",
  "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
  "perception": {
    "entities": [
      "form",
      "https://forms.gle/6Nc6QaaJyDvePxLv7",
      "assumed values",
      "text input",
      "date input",
      "submit button",
      "clear form button"
    ],
    "result_requirement": "Form filled with assumed values, without submitting",
    "original_goal_achieved": false,
    "local_goal_achieved": true,
    "confidence": "0.90",
    "reasoning": "The tool successfully extracted the interactive elements of the form, including text input fields, a date input field, a submit button, and a clear form button. The next step is to fill these fields with assumed values. We can use `globals_schema` to continue with the available information.",
    "local_reasoning": "The current step successfully identified form elements. The next step is to fill these elements with assumed values.",
    "last_tooluse_summary": "interactive_elements_1A successfully extracted form elements.",
    "solution_summary": "Form elements identified; ready for data input.",
    "route": "decision"
  },
  "plan_graph": {},
  "completed_steps": [
    {
      "index": "ROOT",
      "description": "initial query",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7"
        ],
        "result_requirement": "Form filled with assumed values, but not submitted",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.95",
        "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
        "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
        "last_tooluse_summary": "Not applicable",
        "solution_summary": "Not ready yet.",
        "route": "decision"
      },
      "from_step": null
    },
    {
      "index": "0",
      "description": "Open the form URL in a browser tab.",
      "type": "CODE",
      "status": "completed",
      "result": {},
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7",
          "assumed values"
        ],
        "result_requirement": "Form filled with assumed values, without submitting",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.85",
        "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
        "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
        "last_tooluse_summary": "Browser tool opened the URL.",
        "solution_summary": "Form is open but not filled.",
        "route": "decision"
      },
      "from_step": "ROOT"
    },
    {
      "index": "1",
      "description": "Get interactive elements of the form.",
      "type": "CODE",
      "status": "completed",
      "result": {
        "interactive_elements_1A": {
          "success": true,
          "nav": [
            {
              "id": 10,
              "desc": "Report",
              "action": "click_element_by_index"
            },
            {
              "id": 11,
              "desc": "Forms",
              "action": "click_element_by_index"
            }
          ],
          "forms": [
            {
              "id": 2,
              "desc": "Text Input",
              "action": "input_text"
            },
            {
              "id": 3,
              "desc": "Text Input",
              "action": "input_text"
            },
            {
              "id": 4,
              "desc": "Text Input",
              "action": "input_text"
            },
            {
              "id": 5,
              "desc": "Date Input",
              "action": "input_text"
            }
          ],
          "buttons": [
            {
              "id": 7,
              "desc": "Submit",
              "action": "click_element_by_index"
            },
            {
              "id": 9,
              "desc": "Clear form",
              "action": "click_element_by_index"
            }
          ],
          "total": 8
        }
      },
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7",
          "assumed values",
          "text input",
          "date input",
          "submit button",
          "clear form button"
        ],
        "result_requirement": "Form filled with assumed values, without submitting",
        "original_goal_achieved": false,
        "local_goal_achieved": true,
        "confidence": "0.90",
        "reasoning": "The tool successfully extracted the interactive elements of the form, including text input fields, a date input field, a submit button, and a clear form button. The next step is to fill these fields with assumed values. We can use `globals_schema` to continue with the available information.",
        "local_reasoning": "The current step successfully identified form elements. The next step is to fill these elements with assumed values.",
        "last_tooluse_summary": "interactive_elements_1A successfully extracted form elements.",
        "solution_summary": "Form elements identified; ready for data input.",
        "route": "decision"
      },
      "from_step": "1"
    }
  ],
  "failed_steps": [
    {
      "index": "ROOT",
      "description": "initial query",
      "type": "ROOT",
      "status": "completed",
      "result": null,
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7"
        ],
        "result_requirement": "Form filled with assumed values, but not submitted",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.95",
        "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
        "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
        "last_tooluse_summary": "Not applicable",
        "solution_summary": "Not ready yet.",
        "route": "decision"
      },
      "from_step": null
    },
    {
      "index": "0",
      "description": "Open the form URL in a browser tab.",
      "type": "CODE",
      "status": "completed",
      "result": {},
      "conclusion": null,
      "error": null,
      "perception": {
        "entities": [
          "form",
          "https://forms.gle/6Nc6QaaJyDvePxLv7",
          "assumed values"
        ],
        "result_requirement": "Form filled with assumed values, without submitting",
        "original_goal_achieved": false,
        "local_goal_achieved": false,
        "confidence": "0.85",
        "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
        "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
        "last_tooluse_summary": "Browser tool opened the URL.",
        "solution_summary": "Form is open but not filled.",
        "route": "decision"
      },
      "from_step": "ROOT"
    }
  ],
  "globals_schema": {
    "memory": {
      "type": "NoneType",
      "preview": "None"
    },
    "interactive_elements_1A": {
      "type": "dict",
      "preview": "{'success': True, 'nav': [{'id': 10, 'desc': 'Report', 'action': 'click_element_by_index'}, {'id': 11, 'desc': 'Forms', 'action': 'click_element_by_index'}], 'forms': [{'id': 2, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 3, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 4, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 5, 'desc': 'Date Input', 'action': 'input_text'}], 'buttons': [{'id': 7, 'desc': 'Submit', 'action': 'click_element_by_index'}, {'id': 9, 'desc': 'Clear f\u2026"
    }
  }
}
================================================================================

2025-05-27 23:46:56,996 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Decision prompt:
================================================================================
  ############################################################
  #  Decision Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : Graph-based planner
  #  Output: plan_graph + next_step_id + 3 code variants as CODE_0A, CODE_0B, CODE_0C
  #  Format: STRICT JSON (no markdown, no prose)
  ############################################################
  You are the DECISION module of an agentic system.
  Your role is to PLAN ‚Äî not to execute, not to conclude.  
  You take structured input and emit:
  - A `plan_graph` with nodes and edges (representing step flow)
  - A `next_step_id` (e.g., "0", "1", etc.) for execution
  - Three alternate code variants for that step: `CODE_0A`, `CODE_0B`, `CODE_0C`
  Each variant solves the same problem in a different way (e.g., using different tools or chaining strategies).
  ## ‚úÖ MODES
  ### Mode: `"initial"`
  You are given:
  - `"original_query"` (string)
  - `"perception"` (structured object)
  - `"planning_strategy"` ("conservative" | "exploratory")
  - `"globals_schema"` (dict of existing global variables)
  You must return:
  {
    "plan_graph": {
      "nodes": [ { "id": "0", "description": "..." }, ... ],
      "edges": [ { "from": "ROOT", "to": "0", "type": "normal" }, ... ]
    },
    "next_step_id": "0",
    "code_variants": {
      "CODE_0A": "<code block>",
      "CODE_0B": "<code block>",
      "CODE_0C": "<code block>"
    }
  }
  ### Mode: `"mid_session"`
  You are given:
  * `"original_query"`
  * `"perception"` (latest)
  * `"planning_strategy"`
  * `"globals_schema"`
  * `"plan_graph"` (as emitted earlier)
  * `"completed_steps"` (list of step IDs)
  * `"failed_steps"` (list of step IDs)
  Your task:
  1. Evaluate the **most recent step‚Äôs feedback**:
     - If successful, continue to the next planned step
     - If not, revise the `plan_graph`:
       - Keep completed steps unchanged
       - You may **revise or replace the current step**
       - You may also **update PAST or FUTURE steps**
     - Only update `plan_graph` if the structure or meaning of the plan has changed. Minor wording or spelling edits alone should not result in a new plan version.
  You must return:
  1. The same or updated `plan_graph`
  2. A new `next_step_id` (the next or previous unresolved node to execute)
  3. Exactly three alternate `code_variants` for that step
  ## ‚úÖ RULES
  * Each `code_variants` dict must contain:
    * Keys: `"CODE_0A"`, `"CODE_0B"`, `"CODE_0C"` (always matching `next_step_id`)
    * Values: raw Python code blocks (no await, no def, no markdown)
  * Each code block must end with:
    `return { "var_name_0A": value }`
    or:
    `return { "text_0A": t, "summary_0A": s }`
  * All returned variables become part of `globals_schema`.
  * The names of all returned variables must end with `"_0A"`, `"_0B"`, `"_0C"` (always matching `next_step_id`)
  * You may reference these by name in future steps
  * Try and use different variables in `global_schema`, logical tools or strategies for different `code_variants`.
  * These `code_variants` and different variables in `global_schema` exits to create different ways for targeting the problem. Exploit it. 
  * üö´ Do NOT use `import` statements. You must only call tools provided in the list at the end of the prompt.
  * You are inside a sandboxed environment with no internet access and restricted built-ins.
  * If you need HTML parsing, text extraction, summarization, or any web-based processing, use the tools already defined ‚Äî do not reimplement.
  ## ‚úÖ EXAMPLE
  {
    "plan_graph": {
      "nodes": [
        { "id": "0", "description": "Get news URLs" },
        { "id": "1", "description": "Extract key data" },
        { "id": "2", "description": "Summarize results" }
      ],
      "edges": [
        { "from": "ROOT", "to": "0", "type": "normal" },
        { "from": "0", "to": "1", "type": "normal" },
        { "from": "1", "to": "2", "type": "normal" }
      ]
    },
    "next_step_id": "0",
    "code_variants": {
      "CODE_0A": "urls = web_search_urls('Tesla news')\nraw = webpage_url_to_raw_text(urls[0])\nreturn { \"raw\": raw }",
      "CODE_0B": "urls = web_search_urls('Tesla news site:reuters.com')\nsummary = webpage_url_to_summary({\n    \"url\": urls[0],\n    \"prompt\": \"Summarize this article focusing on Tesla's recent financial performance, strategic decisions, and any notable executive commentary.\"\n})\nreturn { \"summary\": summary }",
      "CODE_0C": "urls = web_search_urls('Tesla', 1)\nraw = webpage_url_to_raw_text(urls[0])\nsummary = webpage_url_to_summary({\n    \"url\": urls[0],\n    \"prompt\": \"Summarize this page with an emphasis on Tesla's current market position, new product announcements, and investor sentiment if mentioned.\"\n})\nreturn { \"raw\": raw, \"summary\": summary }"
    }
  }
  ## ‚ùó Variant Diversity Rules
  - Each `code_variants` block must contain **meaningfully different strategies**.
  - Avoid superficial changes like minor keyword tweaks in search queries.
  - Use different tools (e.g., raw text vs summary vs captioning), or different workflows (e.g., multi-step chaining).
  - At least one variant must contain a follow-up logic (e.g., parse, match, or filter).
  - Never return three identical or near-identical code variants.
  - All tool outputs are stored in `globals_schema`. Always retrieve variables from it using `globals_schema.get("key", default)` to avoid crashes.
  - Assume tool results like `web_search_urls(...)` return a **list**, not a string. Avoid unsafe indexing like `urls[0]`. Always check `if urls:` before accessing.
  - You can safely use:
  ```py
  urls = globals_schema.get("search_results_13", [])
  if urls:
    url = urls[0]
    ...
  - Tool outputs may be wrapped in structured formats like `[{ "type": "text", "text": ..., "annotations": ... }]`. Handle this format when chaining.
  - When using `"globals_schema"`, prefer `globals_schema.get("key", "")` or `globals_schema.get("key", {}).get("subkey", "")`
  - Avoid unsafe indexing like `globals_schema["key"]["subkey"]` unless guarded by `if "key" in globals_schema`. Study the variables in `global_schema` to understand how to use or call them in code.
  - Information within `"globals_schema"` MUST be used as much as possible. 
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and provide as much information as possible.
  ## ‚úÖ MEMORY AND CONTEXT
  * Use only values from `"globals_schema"` or new step outputs
  * Do not reuse step-local variables across steps
  * Variable reuse is only allowed if passed via `return`
  ## ‚úÖ FORMAT SUMMARY
  * Output must be **strict JSON**
  * Must include exactly: `plan_graph`, `next_step_id`, `code_variants`
  * `code_variants` must include `CODE_0A`, `CODE_0B`, `CODE_0C`
  * Never emit markdown, prose, or step metadata like `"type"`
  You are a planner. Your job is to produce a complete plan graph with executable step variants. Do not conclude, answer, or ask for clarification.
  ## ‚úÖ TOOL CONSTRAINTS
  - Use up to 3 tool calls per code block
  - No `await`, no `def`, no markdown, no keyword arguments
  - Always end with a structured `return { ... }`
  - Assume every tool returns a well-formed value, but its **internal type (e.g., list, dict)** must be verified before direct access.
  Use only the following tools (in positional form):
  ### The ONLY Available Tools
  - `add(integer, integer)  # Add two numbers.`
  - `subtract(integer, integer)  # Subtract one number from another.`
  - `multiply(string, string)  # Multiply two integers.`
  - `divide(integer, integer)  # Divide one number by another.`
  - `power(integer, integer)  # Compute a raised to the power of b.`
  - `cbrt(integer)  # Compute the cube root of a number.`
  - `factorial(integer)  # Compute the factorial of a number.`
  - `remainder(integer, integer)  # Compute the remainder of a divided by b.`
  - `sin(integer)  # Compute sine of an angle in radians.`
  - `cos(integer)  # Compute cosine of an angle in radians.`
  - `tan(integer)  # Compute tangent of an angle in radians.`
  - `mine(integer, integer)  # Special mining tool.`
  - `create_thumbnail(string)  # Create a 100x100 thumbnail from image.`
  - `strings_to_chars_to_int(string)  # Convert characters to ASCII values.`
  - `int_list_to_exponential_sum(array)  # Sum exponentials of int list.`
  - `fibonacci_numbers(integer)  # Generate first n Fibonacci numbers.`
  - `search_stored_documents_rag(string)  # Search old stored documents like PDF, DOCX, TXT, etc. to get relevant extracts.`
  - `convert_pdf_to_markdown(string)  # Convert PDF to markdown.`
  - `caption_images(string)  #`
  - `web_search_urls(string, integer)  # Search the web using multiple engines (DuckDuckGo, Bing, Ecosia, etc.) and return a list of relevant result URLs`
  - `webpage_url_to_raw_text(string)  # Extract readable text from a webpage`
  - `webpage_url_to_llm_summary(string, any)  # Summarize the webpage using a custom prompt if provided, otherwise fallback to default.`
  - `open_tab(string)  # Open a new browser tab with the specified URL`
  - `go_to_url(string)  # Navigate to URL in the current tab`
  - `go_back()  # Go back to the previous page`
  - `search_google(string)  # Search the query in Google in the current tab`
  - `click_element_by_index(integer)  # Click an element by its index in the current page`
  - `input_text(integer, string)  # Input text into an interactive element`
  - `send_keys(string)  # Send special keys like Escape, Backspace, Enter, or shortcuts like Control+C`
  - `scroll_down(integer)  # Scroll down the page by pixel amount - if none given, scroll one page`
  - `scroll_up(integer)  # Scroll up the page by pixel amount - if none given, scroll one page`
  - `scroll_to_text(string)  # Scroll to specific text on the page`
  - `switch_tab(integer)  # Switch to a specific tab`
  - `close_tab(integer)  # Close a specific tab`
  - `get_dropdown_options(integer)  # Get all options from a native dropdown element`
  - `select_dropdown_option(integer, string)  # Select dropdown option by text`
  - `drag_drop(integer, integer)  # Drag and drop elements or between coordinates - useful for canvas, sliders, file uploads`
  - `get_enhanced_page_structure()  # Get comprehensive page structure as JSON with all content AND interactive element IDs`
  - `get_comprehensive_markdown()  # Get comprehensive page markdown with all content AND interactive element IDs`
  - `save_pdf()  # Save PDF from current page by temporarily removing overlays`
  - `wait(integer)  # Wait for specified number of seconds (default 3)`
  - `done(boolean, string)  # Complete task - indicates if task is finished successfully or not`
  - `get_session_snapshot(boolean, boolean)  # Get current browser session snapshot with elements and optional screenshot saved as PNG file`
  - `take_screenshot(boolean, boolean)  # Take a screenshot of the current page and save as PNG file (returns file path, not base64)`
  - `get_interactive_elements(string, boolean, boolean)  # Get interactive elements with smart viewport and strict filtering`
  - `close_browser_session()  # Close the browser session`
  - `no_input()  # Doesn't take any input.`
  {
    "current_time": "2025-05-27T18:16:54.987282",
    "plan_mode": "initial",
    "planning_strategy": "exploratory",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "perception": {
      "entities": [
        "form",
        "https://forms.gle/6Nc6QaaJyDvePxLv7",
        "assumed values",
        "text input",
        "date input",
        "submit button",
        "clear form button"
      ],
      "result_requirement": "Form filled with assumed values, without submitting",
      "original_goal_achieved": false,
      "local_goal_achieved": true,
      "confidence": "0.90",
      "reasoning": "The tool successfully extracted the interactive elements of the form, including text input fields, a date input field, a submit button, and a clear form button. The next step is to fill these fields with assumed values. We can use `globals_schema` to continue with the available information.",
      "local_reasoning": "The current step successfully identified form elements. The next step is to fill these elements with assumed values.",
      "last_tooluse_summary": "interactive_elements_1A successfully extracted form elements.",
      "solution_summary": "Form elements identified; ready for data input.",
      "route": "decision"
    },
    "plan_graph": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      },
      {
        "index": "1",
        "description": "Get interactive elements of the form.",
        "type": "CODE",
        "status": "completed",
        "result": {
          "interactive_elements_1A": {
            "success": true,
            "nav": [
              {
                "id": 10,
                "desc": "Report",
                "action": "click_element_by_index"
              },
              {
                "id": 11,
                "desc": "Forms",
                "action": "click_element_by_index"
              }
            ],
            "forms": [
              {
                "id": 2,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 3,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 4,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 5,
                "desc": "Date Input",
                "action": "input_text"
              }
            ],
            "buttons": [
              {
                "id": 7,
                "desc": "Submit",
                "action": "click_element_by_index"
              },
              {
                "id": 9,
                "desc": "Clear form",
                "action": "click_element_by_index"
              }
            ],
            "total": 8
          }
        },
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values",
            "text input",
            "date input",
            "submit button",
            "clear form button"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": true,
          "confidence": "0.90",
          "reasoning": "The tool successfully extracted the interactive elements of the form, including text input fields, a date input field, a submit button, and a clear form button. The next step is to fill these fields with assumed values. We can use `globals_schema` to continue with the available information.",
          "local_reasoning": "The current step successfully identified form elements. The next step is to fill these elements with assumed values.",
          "last_tooluse_summary": "interactive_elements_1A successfully extracted form elements.",
          "solution_summary": "Form elements identified; ready for data input.",
          "route": "decision"
        },
        "from_step": "1"
      }
    ],
    "failed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      }
    ],
    "globals_schema": {
      "memory": {
        "type": "NoneType",
        "preview": "None"
      },
      "interactive_elements_1A": {
        "type": "dict",
        "preview": "{'success': True, 'nav': [{'id': 10, 'desc': 'Report', 'action': 'click_element_by_index'}, {'id': 11, 'desc': 'Forms', 'action': 'click_element_by_index'}], 'forms': [{'id': 2, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 3, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 4, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 5, 'desc': 'Date Input', 'action': 'input_text'}], 'buttons': [{'id': 7, 'desc': 'Submit', 'action': 'click_element_by_index'}, {'id': 9, 'desc': 'Clear f\u2026"
      }
    }
  }
================================================================================

2025-05-27 23:46:56,998 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:47:02,955 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:47:02,964 - INFO - agent_loop3:_execute_steps_loop:198 - üìå Decision output
2025-05-27 23:47:02,965 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Decision output (2)
================================================================================
{
  "plan_graph": {
    "nodes": [
      {
        "id": "0",
        "description": "Open the form URL in a browser tab."
      },
      {
        "id": "1",
        "description": "Get interactive elements of the form."
      },
      {
        "id": "2",
        "description": "Fill the form fields with assumed values."
      },
      {
        "id": "3",
        "description": "Verify that the form has been filled without submitting it."
      }
    ],
    "edges": [
      {
        "from": "ROOT",
        "to": "0",
        "type": "normal"
      },
      {
        "from": "0",
        "to": "1",
        "type": "normal"
      },
      {
        "from": "1",
        "to": "2",
        "type": "normal"
      },
      {
        "from": "2",
        "to": "3",
        "type": "normal"
      }
    ]
  },
  "next_step_id": "2",
  "code_variants": {
    "CODE_2A": "elements = globals_schema.get(\"interactive_elements_1A\", {})\n\nif elements and elements.get(\"success\"):\n    form_fields = elements.get(\"forms\", [])\n    if form_fields:\n        text1_id = form_fields[0].get(\"id\")\n        text2_id = form_fields[1].get(\"id\")\n        text3_id = form_fields[2].get(\"id\")\n        date_id = form_fields[3].get(\"id\")\n        input_text(text1_id, \"John Doe\")\n        input_text(text2_id, \"123 Main Street\")\n        input_text(text3_id, \"johndoe@example.com\")\n        input_text(date_id, \"01/01/2024\")\n        filled_2A = True\n    else:\n        filled_2A = False\nelse:\n    filled_2A = False\nreturn {\"filled_2A\": filled_2A}",
    "CODE_2B": "elements = globals_schema.get(\"interactive_elements_1A\", {})\n\nif elements and elements.get(\"success\"):\n    form_fields = elements.get(\"forms\", [])\n    if form_fields:\n        for field in form_fields:\n            field_id = field.get(\"id\")\n            if field_id:\n                if 'Date' in field.get(\"desc\", ''):\n                  input_text(field_id, \"05/27/2024\")\n                else:\n                  input_text(field_id, \"Test Value\")\n        filled_2B = True\n    else:\n        filled_2B = False\nelse:\n    filled_2B = False\nreturn {\"filled_2B\": filled_2B}",
    "CODE_2C": "elements = globals_schema.get(\"interactive_elements_1A\", {})\n\nif elements and elements.get(\"success\"):\n    form_fields = elements.get(\"forms\", [])\n    if form_fields:\n        values = [\"Jane Smith\", \"456 Oak Avenue\", \"janesmith@example.com\", \"12/31/2023\"]\n        for i, field in enumerate(form_fields):\n            field_id = field.get(\"id\")\n            if field_id and i < len(values):\n                input_text(field_id, values[i])\n        filled_2C = True\n    else:\n        filled_2C = False\nelse:\n    filled_2C = False\nreturn {\"filled_2C\": filled_2C}"
  }
}
================================================================================

2025-05-27 23:47:02,976 - INFO - agent_loop3:_execute_steps_loop:123 - üîÅ Loop 3 ‚Äî Executing step 2
2025-05-27 23:47:02,982 - INFO - agent_loop3:_execute_steps_loop:134 - üîç Executing step 2
2025-05-27 23:47:02,982 - INFO - execute_step:execute_step_with_mode:56 - üîç Executing step 2 with mode fallback
2025-05-27 23:47:02,983 - INFO - execute_step:execute_step_with_mode:111 - üîÑ Executing 3 tasks in fallback mode
2025-05-27 23:47:02,983 - INFO - execute_step:execute_step_with_mode:124 - üîç Attempting variant CODE_2A
2025-05-27 23:47:02,983 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù Starting execution of step 2 (variant: CODE_2A)
================================================================================
üîß Code:
================================================================================
  elements = globals_schema.get("interactive_elements_1A", {})
  
  if elements and elements.get("success"):
      form_fields = elements.get("forms", [])
      if form_fields:
          text1_id = form_fields[0].get("id")
          text2_id = form_fields[1].get("id")
          text3_id = form_fields[2].get("id")
          date_id = form_fields[3].get("id")
          input_text(text1_id, "John Doe")
          input_text(text2_id, "123 Main Street")
          input_text(text3_id, "johndoe@example.com")
          input_text(date_id, "01/01/2024")
          filled_2A = True
      else:
          filled_2A = False
  else:
      filled_2A = False
  return {"filled_2A": filled_2A}
================================================================================

2025-05-27 23:47:02,983 - INFO - execute_step:execute_step:18 - üîç Executing code for step 2
2025-05-27 23:47:03,313 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:47:04,077 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:47:04,882 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:47:05,735 - INFO - _client:_send_single_request:1740 - HTTP Request: POST http://localhost:8100/messages?session_id=15987e34515a416c8018fa01daf938e1 "HTTP/1.1 202 Accepted"
2025-05-27 23:47:06,438 - ERROR - log_config:logger_code_block:125 - Failed to format code block: 'NoneType' object has no attribute 'split'
2025-05-27 23:47:06,438 - INFO - log_config:logger_code_block:126 - Execution snapshot for step 2: None
2025-05-27 23:47:06,439 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù Step 2 completed successfully
================================================================================
üîß Code:
================================================================================
  elements = globals_schema.get("interactive_elements_1A", {})
  
  if elements and elements.get("success"):
      form_fields = elements.get("forms", [])
      if form_fields:
          text1_id = form_fields[0].get("id")
          text2_id = form_fields[1].get("id")
          text3_id = form_fields[2].get("id")
          date_id = form_fields[3].get("id")
          input_text(text1_id, "John Doe")
          input_text(text2_id, "123 Main Street")
          input_text(text3_id, "johndoe@example.com")
          input_text(date_id, "01/01/2024")
          filled_2A = True
      else:
          filled_2A = False
  else:
      filled_2A = False
  return {"filled_2A": filled_2A}

================================================================================
üìä Output:
================================================================================
  {
    "execution_time": "2025-05-27 23:47:02",
    "raw": {
      "filled_2A": true
    },
    "result": {
      "filled_2A": true
    },
    "status": "success",
    "total_time": "3.455"
  }
================================================================================

2025-05-27 23:47:06,439 - CODE_BLOCK - log_config:logger_code_block:123 - 
================================================================================
üìù ‚úÖ Variant CODE_2A succeeded
================================================================================
üîß Code:
================================================================================
  elements = globals_schema.get("interactive_elements_1A", {})
  
  if elements and elements.get("success"):
      form_fields = elements.get("forms", [])
      if form_fields:
          text1_id = form_fields[0].get("id")
          text2_id = form_fields[1].get("id")
          text3_id = form_fields[2].get("id")
          date_id = form_fields[3].get("id")
          input_text(text1_id, "John Doe")
          input_text(text2_id, "123 Main Street")
          input_text(text3_id, "johndoe@example.com")
          input_text(date_id, "01/01/2024")
          filled_2A = True
      else:
          filled_2A = False
  else:
      filled_2A = False
  return {"filled_2A": filled_2A}

================================================================================
üìä Output:
================================================================================
  {
    "execution_time": "2025-05-27 23:47:02",
    "raw": {
      "filled_2A": true
    },
    "result": {
      "filled_2A": true
    },
    "status": "success",
    "total_time": "3.455"
  }
================================================================================

2025-05-27 23:47:06,441 - INFO - execute_step:execute_step_with_mode:131 - ‚úÖ Variant CODE_2A succeeded - returning result without processing other variants as its fallback mode
2025-05-27 23:47:06,442 - INFO - agent_loop3:_execute_steps_loop:163 - ‚úÖ Step 2 completed successfully.
2025-05-27 23:47:06,442 - INFO - agent_loop3:_execute_steps_loop:164 - üîç Running perception after execution
2025-05-27 23:47:06,446 - PROMPT_BLOCK - log_config:logger_prompt:83 - 
================================================================================
üìù üìù Perception prompt:
================================================================================
  ############################################################
  #  Perception Module Prompt ‚Äì Gemini Flash 2.0
  #  Role  : High-Level Interpreter & Controller
  #  Output: ERORLL snapshot + Routing Decision + Summarization Directive
  #  Format: STRICT JSON only ‚Äì no markdown, no prose
  ############################################################
  You are the PERCEPTION module of an agentic reasoning system.
  Your job is to **observe**, **assess**, and **route**:
  - Understand the original user query or the result of an executed step
  - Decide if the goal is achieved (‚Üí route to Summarizer)
  - Or if planning is required (‚Üí route to Decision)
  - When routing to Summarizer, provide a clear summarization instruction
  You do not conclude. You do not plan.  
  You **control the loop** by issuing structured, routable status reports.
  ## ‚úÖ MODES
  ### Mode: `"user_query"`
  You are analyzing the original user query.
  Your tasks:
  - Identify key entities (named things, people, topics, values)
  - Describe the expected result type (number, list, explanation, etc.)
  - Check memory and globals to see if the query is already solvable
  - Decide:
    - If solvable now ‚Üí `route = "summarize"`
    - Else ‚Üí `route = "decision"`
  ### Mode: `"step_result"`
  You are analyzing the output of the most recently executed step.
  Your tasks:
  - Extract any useful entities or insights
  - Evaluate tool success/failure
  - Check if the result solves the query or helps progress
  - Decide:
    - If final goal is met or no more steps help ‚Üí `route = "summarize"`
    - Otherwise ‚Üí `route = "decision"`
  ## ‚úÖ INPUT FORMAT
  {
    "snapshot_type": "user_query" | "step_result",
    "original_query": "...",
    "raw_input": "...",             // user query or step output
    "memory_excerpt": [...],        // past solved graphs or summaries
    "globals_schema": { ... },      // currently available variables
    "current_plan": [...],          // nodes + steps if available
    "completed_steps": [...],       // history of successful nodes
    "failed_steps": [...]           // history of failed nodes/tools
  }
  ````
  ## ‚úÖ OUTPUT FORMAT (ERORLL + route + summarization instruction)
  {
    "entities": ["..."],
    "result_requirement": "...",
    "original_goal_achieved": true/false,
    "local_goal_achieved": true/false,
    "confidence": "0.84",
    "reasoning": "...",
    "local_reasoning": "...",
    "last_tooluse_summary": "...",
    "solution_summary": "...",
    "route": "summarize" | "decision",
    "instruction_to_summarize": "..."   // only when route = "summarize"
  }
  ## ‚úÖ INSTRUCTION TO SUMMARIZE ‚Äì Guidelines
  This field is only required when:
  "route": "summarize"
  It must:
  * Be descriptive.
  * Tell the Summarizer **exactly what to include**
  * Specify format, tone, or structure if needed
  * Format might be requested by the user, if not then fall back to markdown. 
  Examples:
  * `"Write a short user-facing summary of project price, name, and location in markdown format."`
  * `"Summarize the extracted chunks and highlight whether any contain dates or financial data. Return data in html format."`
  * `"Summarize the final tool results for the user in plain language"`
  ## ‚úÖ ROUTING LOGIC
  * Use `route = "summarize"` **only if**:
    * Goal is solved (`original_goal_achieved = true`), you have all the details, and the query/step cannot be solved by python code.
    * OR tools failed repeatedly and further steps are unhelpful
    * In both cases, you must provide `instruction_to_summarize`
    * Summarization task does not requise complex mathematical operations that actually need calculator/tools.
  * Use `route = "decision"` when:
    * More tool-based planning is possible or required. 
    * `instruction_to_summarize` must be omitted or `"Not applicable"`
  ## ‚úÖ EXAMPLES
  {
    "entities": ["DLF", "project price"],
    "result_requirement": "Price of DLF project in NCR",
    "original_goal_achieved": true,
    "local_goal_achieved": true,
    "confidence": "0.95",
    "reasoning": "Search result included name, price, and location.",
    "local_reasoning": "Tool output directly listed the required values.",
    "last_tooluse_summary": "webpage_url_to_llm_summary succeeded",
    "solution_summary": "Price: ‚Çπ2.65 Cr. Project: DLF Crest, Sector 54, Gurgaon.",
    "route": "summarize",
    "instruction_to_summarize": "Generate a concise user-facing summary of project name, price, and location. Avoid raw tool output. Markdown formatting"
  }
  {
    "entities": ["TCS", "stock price"],
    "result_requirement": "Live stock price and news summary",
    "original_goal_achieved": false,
    "local_goal_achieved": true,
    "confidence": "0.72",
    "reasoning": "Tool ran successfully, but the content was not structured or informative.",
    "local_reasoning": "HTML fetched, but lacked financial data.",
    "last_tooluse_summary": "webpage_url_to_raw_text succeeded but no price found",
    "solution_summary": "Not ready yet.",
    "route": "decision"
  }
  ## ‚úÖ FINAL NOTES
  * No markdown. No prose. Output strict JSON only.
  * Do not hallucinate tool success or failure.
  * Always refer to tool names in `last_tooluse_summary`.
  * Be deterministic and helpful.
  - You will be given `"globals_schema"` inside which you can find a lot of information regarding past run. 
    - If you think you have all information and we can summarize, then Information within `"globals_schema"` MUST be used to summarize in as fewer steps as possible.
  - If you see a lot of `"failed_steps"` then fall back to information within `"globals_schema"` and call summarize.
  * Remember Decision can only write python code to call tools. IT DOES NOT HAVE SEMANTIC CAPABILITIES. So, you need to be careful when you route to `decision`. If YOU have all the information, then skip to `summarize` and provide all available information in `instruction_to_summarize` to summarize.
  * Remember Decision will try to use keyword search to extract information. That is BAD, and will not help extract sematics or detailed information. If you see that is what Decision planning to do in the next step, pivot to `summarize`.
  * DO NOT let Decision execute any code that is trying to summarize or extract. Route to Summarizer immediately. 
  * Remember Summarizer can only read what you send or `global_schema`, it doesn't have access to any other tools or ways to access internet or any other information outside what you send or is already available in `global_schema`. 
  You control the flow. Decide cleanly. Route responsibly. Solve in as fewer steps as possible.
  {
    "current_time": "2025-05-27T18:17:06.442264",
    "run_id": "ac74f624-3e78-4452-8654-b89e88d60fde-P",
    "snapshot_type": "step_result",
    "original_query": "Query 1: Fill the form at https://forms.gle/6Nc6QaaJyDvePxLv7, assume values, just dont click submit",
    "raw_input": "{'memory': None, 'interactive_elements_1A': {'success': True, 'nav': [{'id': 10, 'desc': 'Report', 'action': 'click_element_by_index'}, {'id': 11, 'desc': 'Forms', 'action': 'click_element_by_index'}], 'forms': [{'id': 2, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 3, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 4, 'desc': 'Text Input', 'action': 'input_text'}, {'id': 5, 'desc': 'Date Input', 'action': 'input_text'}], 'buttons': [{'id': 7, 'desc': 'Submit', 'action': 'click_element_by_index'}, {'id': 9, 'desc': 'Clear form', 'action': 'click_element_by_index'}], 'total': 8}, 'filled_2A': True}",
    "memory_excerpt": null,
    "current_plan": {},
    "completed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      },
      {
        "index": "1",
        "description": "Get interactive elements of the form.",
        "type": "CODE",
        "status": "completed",
        "result": {
          "interactive_elements_1A": {
            "success": true,
            "nav": [
              {
                "id": 10,
                "desc": "Report",
                "action": "click_element_by_index"
              },
              {
                "id": 11,
                "desc": "Forms",
                "action": "click_element_by_index"
              }
            ],
            "forms": [
              {
                "id": 2,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 3,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 4,
                "desc": "Text Input",
                "action": "input_text"
              },
              {
                "id": 5,
                "desc": "Date Input",
                "action": "input_text"
              }
            ],
            "buttons": [
              {
                "id": 7,
                "desc": "Submit",
                "action": "click_element_by_index"
              },
              {
                "id": 9,
                "desc": "Clear form",
                "action": "click_element_by_index"
              }
            ],
            "total": 8
          }
        },
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values",
            "text input",
            "date input",
            "submit button",
            "clear form button"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": true,
          "confidence": "0.90",
          "reasoning": "The tool successfully extracted the interactive elements of the form, including text input fields, a date input field, a submit button, and a clear form button. The next step is to fill these fields with assumed values. We can use `globals_schema` to continue with the available information.",
          "local_reasoning": "The current step successfully identified form elements. The next step is to fill these elements with assumed values.",
          "last_tooluse_summary": "interactive_elements_1A successfully extracted form elements.",
          "solution_summary": "Form elements identified; ready for data input.",
          "route": "decision"
        },
        "from_step": "1"
      },
      {
        "index": "2",
        "description": "Fill the form fields with assumed values.",
        "type": "CODE",
        "status": "completed",
        "result": {
          "filled_2A": true
        },
        "conclusion": null,
        "error": null,
        "perception": null,
        "from_step": "2"
      }
    ],
    "failed_steps": [
      {
        "index": "ROOT",
        "description": "initial query",
        "type": "ROOT",
        "status": "completed",
        "result": null,
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7"
          ],
          "result_requirement": "Form filled with assumed values, but not submitted",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.95",
          "reasoning": "The user wants a form filled, which requires interacting with a webpage. This is achievable through tool use.",
          "local_reasoning": "The original query requires the use of an external tool to fill a web form.",
          "last_tooluse_summary": "Not applicable",
          "solution_summary": "Not ready yet.",
          "route": "decision"
        },
        "from_step": null
      },
      {
        "index": "0",
        "description": "Open the form URL in a browser tab.",
        "type": "CODE",
        "status": "completed",
        "result": {},
        "conclusion": null,
        "error": null,
        "perception": {
          "entities": [
            "form",
            "https://forms.gle/6Nc6QaaJyDvePxLv7",
            "assumed values"
          ],
          "result_requirement": "Form filled with assumed values, without submitting",
          "original_goal_achieved": false,
          "local_goal_achieved": false,
          "confidence": "0.85",
          "reasoning": "The form has been opened, the next step is to fill the form fields with data.  We need to extract fields and populate them.",
          "local_reasoning": "The current step only opened the form. It does not fill the form. More steps are needed.",
          "last_tooluse_summary": "Browser tool opened the URL.",
          "solution_summary": "Form is open but not filled.",
          "route": "decision"
        },
        "from_step": "ROOT"
      }
    ],
    "globals_schema": {
      "memory": [
        "NoneType",
        "None"
      ],
      "interactive_elements_1A": [
        "dict",
        "{'success': True, 'nav': [{'id': 10, 'desc': 'Report', 'action': 'click_element_by_index'}, {'id': 11, 'desc': 'Forms', "
      ],
      "filled_2A": [
        "bool",
        "True"
      ]
    },
    "timestamp": "...",
    "schema_version": 1
  }
================================================================================

2025-05-27 23:47:08,449 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:47:11,146 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:47:11,151 - INFO - agent_loop3:_execute_steps_loop:172 - üìå Perception output
2025-05-27 23:47:11,152 - JSON_BLOCK - log_config:logger_json_block:56 - 
================================================================================
üìå üìå Perception output (2)
================================================================================
{
  "entities": [
    "form",
    "https://forms.gle/6Nc6QaaJyDvePxLv7",
    "assumed values",
    "text input",
    "date input"
  ],
  "result_requirement": "Form filled with assumed values, without submitting",
  "original_goal_achieved": true,
  "local_goal_achieved": true,
  "confidence": "0.95",
  "reasoning": "The form has been successfully filled with assumed values.  The user instructed to not submit the form and just fill it. According to the `globals_schema`, `filled_2A` is True, meaning the goal has been achieved.",
  "local_reasoning": "The step result `filled_2A`: True indicates successful completion.",
  "last_tooluse_summary": "Form fields filled successfully.",
  "solution_summary": "The form at https://forms.gle/6Nc6QaaJyDvePxLv7 has been filled with assumed values as requested, without submitting.",
  "route": "summarize",
  "instruction_to_summarize": "Summarize that the form at https://forms.gle/6Nc6QaaJyDvePxLv7 has been filled with assumed values as requested, without submitting. User asked to fill the form and not submit, which has been achieved. Use markdown formatting."
}
================================================================================

2025-05-27 23:47:11,171 - INFO - agent_loop3:_execute_steps_loop:178 - üîç Original goal achieved or route is summarize, Now summarizing...
2025-05-27 23:47:13,224 - INFO - models:generate_content:7118 - AFC is enabled with max remote calls: 10.
2025-05-27 23:47:15,776 - INFO - _client:_send_single_request:1740 - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-27 23:47:15,798 - INFO - agent_loop3:run:53 - ‚úÖ Successfully completed all steps. Returning final output...
